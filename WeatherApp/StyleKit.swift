//
//  StyleKit.swift
//  WeatherApp
//
//  Created by Juan Gestal on 10/8/18.
//  Copyright Â© 2018 Juan Gestal. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let black: UIColor = UIColor(red: 0.168, green: 0.168, blue: 0.168, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var black: UIColor { return Cache.black }

    //// Drawing Methods

    @objc dynamic public class func drawCompassDisplay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, compassAngle: CGFloat = -25, compassVelocityText: String = "8 mph", dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let lightTextColor1 = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let lightTextColor2 = UIColor(red: 0.180, green: 0.454, blue: 0.687, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let compassDisplayAngle: CGFloat = compassAngle - 90
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let lightTextColor = dayTheme ? lightTextColor1 : lightTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 300))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 161)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 122, y: 68, width: 76, height: 76)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawWindIcon(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, dayTheme: true)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "N"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 140, y: 252, width: 40, height: 48)
        let text2TextContent = "S"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "E"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 260, y: 136, width: 40, height: 48)
        let text4TextContent = "W"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -compassDisplayAngle * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -98.22))
        polygonPath.addLine(to: CGPoint(x: 11.26, y: 49.11))
        polygonPath.addLine(to: CGPoint(x: -11.26, y: 49.11))
        polygonPath.close()
        indicatorColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// NE Drawing
        let nERect = CGRect(x: 60, y: 53, width: 40, height: 48)
        let nETextContent = "NE"
        let nEStyle = NSMutableParagraphStyle()
        nEStyle.alignment = .center
        let nEFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nEStyle,
        ] as [NSAttributedStringKey: Any]

        let nETextHeight: CGFloat = nETextContent.boundingRect(with: CGSize(width: nERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nERect)
        nETextContent.draw(in: CGRect(x: nERect.minX, y: nERect.minY + (nERect.height - nETextHeight) / 2, width: nERect.width, height: nETextHeight), withAttributes: nEFontAttributes)
        context.restoreGState()


        //// NE 2 Drawing
        let nE2Rect = CGRect(x: 220, y: 52, width: 40, height: 48)
        let nE2TextContent = "NW"
        let nE2Style = NSMutableParagraphStyle()
        nE2Style.alignment = .center
        let nE2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE2Style,
        ] as [NSAttributedStringKey: Any]

        let nE2TextHeight: CGFloat = nE2TextContent.boundingRect(with: CGSize(width: nE2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE2Rect)
        nE2TextContent.draw(in: CGRect(x: nE2Rect.minX, y: nE2Rect.minY + (nE2Rect.height - nE2TextHeight) / 2, width: nE2Rect.width, height: nE2TextHeight), withAttributes: nE2FontAttributes)
        context.restoreGState()


        //// NE 3 Drawing
        let nE3Rect = CGRect(x: 60, y: 220, width: 40, height: 48)
        let nE3TextContent = "SE"
        let nE3Style = NSMutableParagraphStyle()
        nE3Style.alignment = .center
        let nE3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE3Style,
        ] as [NSAttributedStringKey: Any]

        let nE3TextHeight: CGFloat = nE3TextContent.boundingRect(with: CGSize(width: nE3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE3Rect)
        nE3TextContent.draw(in: CGRect(x: nE3Rect.minX, y: nE3Rect.minY + (nE3Rect.height - nE3TextHeight) / 2, width: nE3Rect.width, height: nE3TextHeight), withAttributes: nE3FontAttributes)
        context.restoreGState()


        //// NE 4 Drawing
        let nE4Rect = CGRect(x: 220, y: 220, width: 40, height: 48)
        let nE4TextContent = "SW"
        let nE4Style = NSMutableParagraphStyle()
        nE4Style.alignment = .center
        let nE4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE4Style,
        ] as [NSAttributedStringKey: Any]

        let nE4TextHeight: CGFloat = nE4TextContent.boundingRect(with: CGSize(width: nE4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE4Rect)
        nE4TextContent.draw(in: CGRect(x: nE4Rect.minX, y: nE4Rect.minY + (nE4Rect.height - nE4TextHeight) / 2, width: nE4Rect.width, height: nE4TextHeight), withAttributes: nE4FontAttributes)
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = compassVelocityText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        compassVelocityText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTermometer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 360), resizing: ResizingBehavior = .aspectFit, termometerDegrees: CGFloat = 57, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 360), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 360)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let termometerColor1 = UIColor(red: 0.469, green: 0.514, blue: 0.518, alpha: 1.000)
        let termometerIndicator1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let termometerColor2 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let termometerIndicator2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let termometer0 = UIColor(red: 0.224, green: 0.555, blue: 0.829, alpha: 1.000)
        let termometer10 = UIColor(red: 0.938, green: 0.770, blue: 0.000, alpha: 1.000)
        let termometer20 = UIColor(red: 0.839, green: 0.472, blue: 0.000, alpha: 1.000)
        let termometer30 = UIColor(red: 0.757, green: 0.317, blue: 0.000, alpha: 1.000)
        let termometer40 = UIColor(red: 0.832, green: 0.286, blue: 0.195, alpha: 1.000)

        //// Variable Declarations
        let termometerDisplayYScale: CGFloat = termometerDegrees * 0.02 < 0 ? 0 : (termometerDegrees * 0.02 > 1 ? 1 : termometerDegrees * 0.02)
        let termometerDisplayText = "\(Int(round(termometerDegrees)))" + " Â°C"
        let termometerTemperatureColor = termometerDegrees < 10 ? termometer0 : (termometerDegrees < 20 ? termometer10 : (termometerDegrees < 30 ? termometer20 : (termometerDegrees < 40 ? termometer30 : termometer40)))
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let termometerColor = dayTheme ? termometerColor1 : termometerColor2
        let termometerIndicator = dayTheme ? termometerIndicator1 : termometerIndicator2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 28, y: 209, width: 104, height: 104))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 90, y: 46))
        bezier2Path.addCurve(to: CGPoint(x: 89.95, y: 47), controlPoint1: CGPoint(x: 90, y: 46.34), controlPoint2: CGPoint(x: 89.98, y: 46.67))
        bezier2Path.addCurve(to: CGPoint(x: 90, y: 249.51), controlPoint1: CGPoint(x: 89.99, y: 47), controlPoint2: CGPoint(x: 90, y: 210.11))
        bezier2Path.addCurve(to: CGPoint(x: 95.25, y: 257.15), controlPoint1: CGPoint(x: 92.43, y: 251.46), controlPoint2: CGPoint(x: 94.28, y: 254.11))
        bezier2Path.addCurve(to: CGPoint(x: 96, y: 262), controlPoint1: CGPoint(x: 95.74, y: 258.68), controlPoint2: CGPoint(x: 96, y: 260.31))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 278), controlPoint1: CGPoint(x: 96, y: 270.84), controlPoint2: CGPoint(x: 88.84, y: 278))
        bezier2Path.addCurve(to: CGPoint(x: 64, y: 262), controlPoint1: CGPoint(x: 71.16, y: 278), controlPoint2: CGPoint(x: 64, y: 270.84))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 249.51), controlPoint1: CGPoint(x: 64, y: 256.95), controlPoint2: CGPoint(x: 66.34, y: 252.44))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 47), controlPoint1: CGPoint(x: 70, y: 210.11), controlPoint2: CGPoint(x: 70, y: 47))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 46), controlPoint1: CGPoint(x: 70.02, y: 46.67), controlPoint2: CGPoint(x: 70, y: 46.34))
        bezier2Path.addCurve(to: CGPoint(x: 72.47, y: 39.42), controlPoint1: CGPoint(x: 70, y: 43.48), controlPoint2: CGPoint(x: 70.93, y: 41.18))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 36), controlPoint1: CGPoint(x: 74.3, y: 37.33), controlPoint2: CGPoint(x: 76.99, y: 36))
        bezier2Path.addCurve(to: CGPoint(x: 90, y: 46), controlPoint1: CGPoint(x: 85.52, y: 36), controlPoint2: CGPoint(x: 90, y: 40.48))
        bezier2Path.close()
        UIColor.black.setFill()
        bezier2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 56, y: 244, width: 47, height: 42))
        termometerTemperatureColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 96, y: 250)
        context.scaleBy(x: 1, y: termometerDisplayYScale)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -32, y: -214, width: 32, height: 214))
        termometerTemperatureColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 56, y: 73, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 56, y: 117, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 56, y: 161, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 56, y: 205, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle7Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 6, y: 183, width: 40, height: 48)
        let text4TextContent = "10"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .right
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 6, y: 140, width: 40, height: 48)
        let textTextContent = "20"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 6, y: 97, width: 40, height: 48)
        let text2TextContent = "30"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .right
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 6, y: 54, width: 40, height: 48)
        let text3TextContent = "40"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .right
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 80, y: 36))
        bezier4Path.addCurve(to: CGPoint(x: 75.26, y: 37.19), controlPoint1: CGPoint(x: 78.29, y: 36), controlPoint2: CGPoint(x: 76.67, y: 36.43))
        bezier4Path.addCurve(to: CGPoint(x: 72.47, y: 39.42), controlPoint1: CGPoint(x: 74.2, y: 37.76), controlPoint2: CGPoint(x: 73.25, y: 38.52))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 46), controlPoint1: CGPoint(x: 70.93, y: 41.18), controlPoint2: CGPoint(x: 70, y: 43.48))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 47), controlPoint1: CGPoint(x: 70, y: 46.34), controlPoint2: CGPoint(x: 70.02, y: 46.67))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 249.51), controlPoint1: CGPoint(x: 70, y: 47), controlPoint2: CGPoint(x: 70, y: 210.11))
        bezier4Path.addCurve(to: CGPoint(x: 64, y: 262), controlPoint1: CGPoint(x: 66.34, y: 252.44), controlPoint2: CGPoint(x: 64, y: 256.95))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 278), controlPoint1: CGPoint(x: 64, y: 270.84), controlPoint2: CGPoint(x: 71.16, y: 278))
        bezier4Path.addCurve(to: CGPoint(x: 96, y: 262), controlPoint1: CGPoint(x: 88.84, y: 278), controlPoint2: CGPoint(x: 96, y: 270.84))
        bezier4Path.addCurve(to: CGPoint(x: 95.25, y: 257.15), controlPoint1: CGPoint(x: 96, y: 260.31), controlPoint2: CGPoint(x: 95.74, y: 258.68))
        bezier4Path.addCurve(to: CGPoint(x: 90, y: 249.51), controlPoint1: CGPoint(x: 94.28, y: 254.11), controlPoint2: CGPoint(x: 92.43, y: 251.46))
        bezier4Path.addCurve(to: CGPoint(x: 89.95, y: 47), controlPoint1: CGPoint(x: 90, y: 210.11), controlPoint2: CGPoint(x: 89.99, y: 47))
        bezier4Path.addCurve(to: CGPoint(x: 90, y: 46), controlPoint1: CGPoint(x: 89.98, y: 46.67), controlPoint2: CGPoint(x: 90, y: 46.34))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 36), controlPoint1: CGPoint(x: 90, y: 40.48), controlPoint2: CGPoint(x: 85.52, y: 36))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 110, y: 43))
        bezier4Path.addCurve(to: CGPoint(x: 109.93, y: 45), controlPoint1: CGPoint(x: 110, y: 43.67), controlPoint2: CGPoint(x: 109.98, y: 44.34))
        bezier4Path.addCurve(to: CGPoint(x: 110, y: 230.9), controlPoint1: CGPoint(x: 110, y: 45), controlPoint2: CGPoint(x: 110, y: 174.98))
        bezier4Path.addCurve(to: CGPoint(x: 112.42, y: 233.62), controlPoint1: CGPoint(x: 110.85, y: 231.77), controlPoint2: CGPoint(x: 111.65, y: 232.68))
        bezier4Path.addCurve(to: CGPoint(x: 122, y: 260.5), controlPoint1: CGPoint(x: 118.41, y: 240.95), controlPoint2: CGPoint(x: 122, y: 250.3))
        bezier4Path.addCurve(to: CGPoint(x: 79.5, y: 303), controlPoint1: CGPoint(x: 122, y: 283.97), controlPoint2: CGPoint(x: 102.97, y: 303))
        bezier4Path.addCurve(to: CGPoint(x: 37, y: 260.5), controlPoint1: CGPoint(x: 56.03, y: 303), controlPoint2: CGPoint(x: 37, y: 283.97))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 229.91), controlPoint1: CGPoint(x: 37, y: 248.49), controlPoint2: CGPoint(x: 41.99, y: 237.64))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 45), controlPoint1: CGPoint(x: 50, y: 173.45), controlPoint2: CGPoint(x: 50, y: 45))
        bezier4Path.addLine(to: CGPoint(x: 50.07, y: 45))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 43), controlPoint1: CGPoint(x: 50.02, y: 44.34), controlPoint2: CGPoint(x: 50, y: 43.67))
        bezier4Path.addCurve(to: CGPoint(x: 58.51, y: 22.07), controlPoint1: CGPoint(x: 50, y: 34.86), controlPoint2: CGPoint(x: 53.24, y: 27.47))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 13), controlPoint1: CGPoint(x: 64.01, y: 16.45), controlPoint2: CGPoint(x: 71.6, y: 13))
        bezier4Path.addCurve(to: CGPoint(x: 110, y: 43), controlPoint1: CGPoint(x: 96.57, y: 13), controlPoint2: CGPoint(x: 110, y: 26.43))
        bezier4Path.close()
        termometerColor.setFill()
        bezier4Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 80, y: 36))
        bezier3Path.addCurve(to: CGPoint(x: 72.47, y: 39.42), controlPoint1: CGPoint(x: 76.99, y: 36), controlPoint2: CGPoint(x: 74.3, y: 37.33))
        bezier3Path.addCurve(to: CGPoint(x: 70.74, y: 42.21), controlPoint1: CGPoint(x: 71.75, y: 40.25), controlPoint2: CGPoint(x: 71.16, y: 41.19))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 46), controlPoint1: CGPoint(x: 70.26, y: 43.38), controlPoint2: CGPoint(x: 70, y: 44.66))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 47), controlPoint1: CGPoint(x: 70, y: 46.34), controlPoint2: CGPoint(x: 70.02, y: 46.67))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 249.51), controlPoint1: CGPoint(x: 70, y: 47), controlPoint2: CGPoint(x: 70, y: 210.11))
        bezier3Path.addCurve(to: CGPoint(x: 64, y: 262), controlPoint1: CGPoint(x: 66.34, y: 252.44), controlPoint2: CGPoint(x: 64, y: 256.95))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 278), controlPoint1: CGPoint(x: 64, y: 270.84), controlPoint2: CGPoint(x: 71.16, y: 278))
        bezier3Path.addCurve(to: CGPoint(x: 96, y: 262), controlPoint1: CGPoint(x: 88.84, y: 278), controlPoint2: CGPoint(x: 96, y: 270.84))
        bezier3Path.addCurve(to: CGPoint(x: 95.25, y: 257.15), controlPoint1: CGPoint(x: 96, y: 260.31), controlPoint2: CGPoint(x: 95.74, y: 258.68))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 249.51), controlPoint1: CGPoint(x: 94.28, y: 254.11), controlPoint2: CGPoint(x: 92.43, y: 251.46))
        bezier3Path.addCurve(to: CGPoint(x: 89.95, y: 47), controlPoint1: CGPoint(x: 90, y: 210.11), controlPoint2: CGPoint(x: 89.99, y: 47))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 46), controlPoint1: CGPoint(x: 89.98, y: 46.67), controlPoint2: CGPoint(x: 90, y: 46.34))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 36), controlPoint1: CGPoint(x: 90, y: 40.48), controlPoint2: CGPoint(x: 85.52, y: 36))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 95, y: 44))
        bezier3Path.addCurve(to: CGPoint(x: 94.87, y: 46), controlPoint1: CGPoint(x: 95, y: 44.68), controlPoint2: CGPoint(x: 94.96, y: 45.35))
        bezier3Path.addLine(to: CGPoint(x: 95, y: 46))
        bezier3Path.addCurve(to: CGPoint(x: 95, y: 244.84), controlPoint1: CGPoint(x: 95, y: 46), controlPoint2: CGPoint(x: 95, y: 194.83))
        bezier3Path.addCurve(to: CGPoint(x: 100.93, y: 252.85), controlPoint1: CGPoint(x: 97.51, y: 247.04), controlPoint2: CGPoint(x: 99.54, y: 249.77))
        bezier3Path.addCurve(to: CGPoint(x: 103, y: 262.5), controlPoint1: CGPoint(x: 102.26, y: 255.79), controlPoint2: CGPoint(x: 103, y: 259.06))
        bezier3Path.addCurve(to: CGPoint(x: 79.5, y: 286), controlPoint1: CGPoint(x: 103, y: 275.48), controlPoint2: CGPoint(x: 92.48, y: 286))
        bezier3Path.addCurve(to: CGPoint(x: 56, y: 262.5), controlPoint1: CGPoint(x: 66.52, y: 286), controlPoint2: CGPoint(x: 56, y: 275.48))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 244.01), controlPoint1: CGPoint(x: 56, y: 254.99), controlPoint2: CGPoint(x: 59.52, y: 248.31))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 46), controlPoint1: CGPoint(x: 65, y: 193.21), controlPoint2: CGPoint(x: 65, y: 46))
        bezier3Path.addLine(to: CGPoint(x: 65.13, y: 46))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 44), controlPoint1: CGPoint(x: 65.04, y: 45.35), controlPoint2: CGPoint(x: 65, y: 44.68))
        bezier3Path.addCurve(to: CGPoint(x: 66.04, y: 38.5), controlPoint1: CGPoint(x: 65, y: 42.06), controlPoint2: CGPoint(x: 65.37, y: 40.2))
        bezier3Path.addCurve(to: CGPoint(x: 68.76, y: 34.07), controlPoint1: CGPoint(x: 66.69, y: 36.86), controlPoint2: CGPoint(x: 67.61, y: 35.37))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 29), controlPoint1: CGPoint(x: 71.53, y: 30.95), controlPoint2: CGPoint(x: 75.54, y: 29))
        bezier3Path.addCurve(to: CGPoint(x: 95, y: 44), controlPoint1: CGPoint(x: 88.28, y: 29), controlPoint2: CGPoint(x: 95, y: 35.72))
        bezier3Path.close()
        termometerIndicator.setFill()
        bezier3Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 55, y: 76, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle3Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 55, y: 119, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 55, y: 162, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 55, y: 205, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle10Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 320, width: 160, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor2,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = termometerDisplayText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        termometerDisplayText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHumidityDisplay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, humidity: CGFloat = 0, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let lightTextColor1 = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let lightTextColor2 = UIColor(red: 0.180, green: 0.454, blue: 0.687, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let humidityDisplayAngle: CGFloat = -180 * humidity + 90
        let humidityDisplayText = "\(Int(round(humidity * 100)))" + " %"
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let lightTextColor = dayTheme ? lightTextColor1 : lightTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 30))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 64.54, y: 64.54)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -15, width: 6, height: 30), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 255.46, y: 65.54)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -15, width: 6, height: 30), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Symbol Drawing
        let symbolRect = CGRect(x: 122, y: 68, width: 76, height: 76)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawHumidityIcon(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, dayTheme: true)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "50"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "0"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 243, y: 136, width: 57, height: 48)
        let text4TextContent = "100"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -humidityDisplayAngle * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -98.22))
        polygonPath.addLine(to: CGPoint(x: 11.26, y: 49.11))
        polygonPath.addLine(to: CGPoint(x: -11.26, y: 49.11))
        polygonPath.close()
        indicatorColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// NE Drawing
        let nERect = CGRect(x: 60, y: 53, width: 40, height: 48)
        let nETextContent = "25"
        let nEStyle = NSMutableParagraphStyle()
        nEStyle.alignment = .center
        let nEFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nEStyle,
        ] as [NSAttributedStringKey: Any]

        let nETextHeight: CGFloat = nETextContent.boundingRect(with: CGSize(width: nERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nERect)
        nETextContent.draw(in: CGRect(x: nERect.minX, y: nERect.minY + (nERect.height - nETextHeight) / 2, width: nERect.width, height: nETextHeight), withAttributes: nEFontAttributes)
        context.restoreGState()


        //// NE 2 Drawing
        let nE2Rect = CGRect(x: 220, y: 53, width: 40, height: 48)
        let nE2TextContent = "75"
        let nE2Style = NSMutableParagraphStyle()
        nE2Style.alignment = .center
        let nE2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE2Style,
        ] as [NSAttributedStringKey: Any]

        let nE2TextHeight: CGFloat = nE2TextContent.boundingRect(with: CGSize(width: nE2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE2Rect)
        nE2TextContent.draw(in: CGRect(x: nE2Rect.minX, y: nE2Rect.minY + (nE2Rect.height - nE2TextHeight) / 2, width: nE2Rect.width, height: nE2TextHeight), withAttributes: nE2FontAttributes)
        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = humidityDisplayText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        humidityDisplayText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, hours: CGFloat = 5, minutes: CGFloat = 12, isSunset: Bool = true, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let clockInfoText = hours > 12 ? "PM" : "AM"
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360)
        let hourAngle: CGFloat = -hours / 12.0 * 360 + minuteAngle / 12.0
        let isSunrise = !isSunset
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 300))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -30 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: 60 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 159.6, y: 159.6)
        context.rotate(by: 30 * CGFloat.pi/180)

        let rectangle8Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 159.6, y: 159.6)
        context.rotate(by: -60 * CGFloat.pi/180)

        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle5Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Group 2
        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "12"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 140, y: 252, width: 40, height: 48)
        let text2TextContent = "6"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "9"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 260, y: 136, width: 40, height: 48)
        let text4TextContent = "3"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()




        if (isSunset) {
            //// Sunset Drawing
            let sunsetRect = CGRect(x: 110, y: 68, width: 100, height: 100)
            context.saveGState()
            context.clip(to: sunsetRect)
            context.translateBy(x: sunsetRect.minX, y: sunsetRect.minY)

            StyleKit.drawSunsetIcon(frame: CGRect(origin: .zero, size: sunsetRect.size), resizing: .stretch, dayTheme: true)
            context.restoreGState()
        }


        if (isSunrise) {
            //// Sunrise Drawing
            let sunriseRect = CGRect(x: 110, y: 68, width: 100, height: 100)
            context.saveGState()
            context.clip(to: sunriseRect)
            context.translateBy(x: sunriseRect.minX, y: sunriseRect.minY)

            StyleKit.drawSunriseIcon(frame: CGRect(origin: .zero, size: sunriseRect.size), resizing: .stretch, dayTheme: true)
            context.restoreGState()
        }


        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: 159.7, y: 159.19)
        context.rotate(by: -minuteAngle * CGFloat.pi/180)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: -2.7, y: -117.19, width: 6, height: 121))
        indicatorColor.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 159.4, y: 161.41)
        context.rotate(by: -hourAngle * CGFloat.pi/180)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: -4.5, y: -67.79, width: 10, height: 70))
        indicatorColor.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = clockInfoText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        clockInfoText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1767, height: 905), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1767, height: 905), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1767, y: resizedFrame.height / 905)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 115, y: 230, width: 480, height: 480)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawHumidityDisplay(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, humidity: 0.298, dayTheme: true)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 734, y: 203, width: 300, height: 669)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        StyleKit.drawTermometer(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, termometerDegrees: 20, dayTheme: true)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 1171, y: 230, width: 480, height: 480)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        StyleKit.drawCompassDisplay(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, compassAngle: 0, compassVelocityText: "8 mph", dayTheme: false)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 24, width: 1767, height: 179)
        let textTextContent = "Electronic Weather Station"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "TimesNewRomanPSMT", size: 44)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHumidityIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 100, y: 37.4))
        bezier4Path.addCurve(to: CGPoint(x: 78.39, y: 1.81), controlPoint1: CGPoint(x: 100, y: 25.51), controlPoint2: CGPoint(x: 82, y: 5.67))
        bezier4Path.addCurve(to: CGPoint(x: 71.77, y: 1.62), controlPoint1: CGPoint(x: 76.61, y: 0.01), controlPoint2: CGPoint(x: 73.65, y: -0.08))
        bezier4Path.addCurve(to: CGPoint(x: 71.57, y: 1.81), controlPoint1: CGPoint(x: 71.7, y: 1.68), controlPoint2: CGPoint(x: 71.63, y: 1.74))
        bezier4Path.addCurve(to: CGPoint(x: 54.75, y: 23.79), controlPoint1: CGPoint(x: 65.26, y: 8.62), controlPoint2: CGPoint(x: 59.63, y: 15.98))
        bezier4Path.addCurve(to: CGPoint(x: 48.77, y: 17.06), controlPoint1: CGPoint(x: 51.8, y: 20.33), controlPoint2: CGPoint(x: 49.52, y: 17.86))
        bezier4Path.addCurve(to: CGPoint(x: 42.15, y: 16.87), controlPoint1: CGPoint(x: 47, y: 15.25), controlPoint2: CGPoint(x: 44.04, y: 15.17))
        bezier4Path.addCurve(to: CGPoint(x: 41.95, y: 17.06), controlPoint1: CGPoint(x: 42.09, y: 16.93), controlPoint2: CGPoint(x: 42.02, y: 16.99))
        bezier4Path.addCurve(to: CGPoint(x: 24.73, y: 38.32), controlPoint1: CGPoint(x: 35.75, y: 23.79), controlPoint2: CGPoint(x: 30, y: 30.89))
        bezier4Path.addCurve(to: CGPoint(x: 19.52, y: 30.56), controlPoint1: CGPoint(x: 22.64, y: 34.94), controlPoint2: CGPoint(x: 20.61, y: 32.07))
        bezier4Path.addCurve(to: CGPoint(x: 13.2, y: 29.46), controlPoint1: CGPoint(x: 18.09, y: 28.58), controlPoint2: CGPoint(x: 15.26, y: 28.09))
        bezier4Path.addCurve(to: CGPoint(x: 12.05, y: 30.56), controlPoint1: CGPoint(x: 12.75, y: 29.76), controlPoint2: CGPoint(x: 12.36, y: 30.13))
        bezier4Path.addCurve(to: CGPoint(x: -0, y: 54.83), controlPoint1: CGPoint(x: 9.32, y: 34.53), controlPoint2: CGPoint(x: -0, y: 47.99))
        bezier4Path.addCurve(to: CGPoint(x: 14.39, y: 70.08), controlPoint1: CGPoint(x: -0.04, y: 62.71), controlPoint2: CGPoint(x: 6.2, y: 69.32))
        bezier4Path.addCurve(to: CGPoint(x: 52.32, y: 93.27), controlPoint1: CGPoint(x: 18.18, y: 86.52), controlPoint2: CGPoint(x: 35.16, y: 96.91))
        bezier4Path.addCurve(to: CGPoint(x: 77.27, y: 63.54), controlPoint1: CGPoint(x: 66.88, y: 90.19), controlPoint2: CGPoint(x: 77.25, y: 77.83))
        bezier4Path.addCurve(to: CGPoint(x: 77.09, y: 61.37), controlPoint1: CGPoint(x: 77.26, y: 62.81), controlPoint2: CGPoint(x: 77.2, y: 62.09))
        bezier4Path.addCurve(to: CGPoint(x: 100, y: 37.4), controlPoint1: CGPoint(x: 90.08, y: 60.32), controlPoint2: CGPoint(x: 100.05, y: 49.89))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 15.91, y: 61.37))
        bezier4Path.addCurve(to: CGPoint(x: 9.09, y: 54.83), controlPoint1: CGPoint(x: 12.14, y: 61.37), controlPoint2: CGPoint(x: 9.09, y: 58.44))
        bezier4Path.addCurve(to: CGPoint(x: 15.91, y: 41.04), controlPoint1: CGPoint(x: 9.09, y: 52.65), controlPoint2: CGPoint(x: 12.2, y: 46.84))
        bezier4Path.addCurve(to: CGPoint(x: 22.73, y: 54.83), controlPoint1: CGPoint(x: 19.61, y: 46.84), controlPoint2: CGPoint(x: 22.73, y: 52.65))
        bezier4Path.addCurve(to: CGPoint(x: 15.91, y: 61.37), controlPoint1: CGPoint(x: 22.73, y: 58.44), controlPoint2: CGPoint(x: 19.67, y: 61.37))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 45.45, y: 85.33))
        bezier4Path.addCurve(to: CGPoint(x: 23.3, y: 68.31), controlPoint1: CGPoint(x: 34.84, y: 85.27), controlPoint2: CGPoint(x: 25.67, y: 78.23))
        bezier4Path.addCurve(to: CGPoint(x: 31.82, y: 54.83), controlPoint1: CGPoint(x: 28.53, y: 65.69), controlPoint2: CGPoint(x: 31.81, y: 60.49))
        bezier4Path.addCurve(to: CGPoint(x: 29.91, y: 47.75), controlPoint1: CGPoint(x: 31.64, y: 52.38), controlPoint2: CGPoint(x: 30.99, y: 49.98))
        bezier4Path.addCurve(to: CGPoint(x: 31.09, y: 45.09), controlPoint1: CGPoint(x: 30.09, y: 46.79), controlPoint2: CGPoint(x: 30.49, y: 45.88))
        bezier4Path.addCurve(to: CGPoint(x: 45.45, y: 26.64), controlPoint1: CGPoint(x: 35.5, y: 38.68), controlPoint2: CGPoint(x: 40.29, y: 32.52))
        bezier4Path.addCurve(to: CGPoint(x: 68.18, y: 63.54), controlPoint1: CGPoint(x: 55.41, y: 37.93), controlPoint2: CGPoint(x: 68.18, y: 55.25))
        bezier4Path.addCurve(to: CGPoint(x: 45.45, y: 85.33), controlPoint1: CGPoint(x: 68.18, y: 75.57), controlPoint2: CGPoint(x: 58.01, y: 85.33))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 75, y: 52.65))
        bezier4Path.addLine(to: CGPoint(x: 74.45, y: 52.65))
        bezier4Path.addCurve(to: CGPoint(x: 61, y: 31.37), controlPoint1: CGPoint(x: 70.81, y: 45.1), controlPoint2: CGPoint(x: 66.3, y: 37.96))
        bezier4Path.addCurve(to: CGPoint(x: 61.36, y: 30.61), controlPoint1: CGPoint(x: 61.08, y: 31.1), controlPoint2: CGPoint(x: 61.21, y: 30.84))
        bezier4Path.addCurve(to: CGPoint(x: 75, y: 11.44), controlPoint1: CGPoint(x: 65.19, y: 23.78), controlPoint2: CGPoint(x: 69.77, y: 17.35))
        bezier4Path.addCurve(to: CGPoint(x: 90.91, y: 37.4), controlPoint1: CGPoint(x: 82.45, y: 20.15), controlPoint2: CGPoint(x: 90.91, y: 31.96))
        bezier4Path.addCurve(to: CGPoint(x: 75, y: 52.65), controlPoint1: CGPoint(x: 90.91, y: 45.83), controlPoint2: CGPoint(x: 83.79, y: 52.65))
        bezier4Path.close()
        iconColor.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWindIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 66.92, y: 28.65))
        bezierPath.addCurve(to: CGPoint(x: 52.05, y: 13.95), controlPoint1: CGPoint(x: 66.92, y: 20.56), controlPoint2: CGPoint(x: 60.23, y: 13.95))
        bezierPath.addCurve(to: CGPoint(x: 37.17, y: 28.65), controlPoint1: CGPoint(x: 43.86, y: 13.95), controlPoint2: CGPoint(x: 37.17, y: 20.56))
        bezierPath.addLine(to: CGPoint(x: 44.6, y: 28.65))
        bezierPath.addCurve(to: CGPoint(x: 52.03, y: 21.31), controlPoint1: CGPoint(x: 44.6, y: 24.61), controlPoint2: CGPoint(x: 47.94, y: 21.31))
        bezierPath.addCurve(to: CGPoint(x: 59.45, y: 28.65), controlPoint1: CGPoint(x: 56.11, y: 21.31), controlPoint2: CGPoint(x: 59.45, y: 24.61))
        bezierPath.addCurve(to: CGPoint(x: 52.03, y: 35.99), controlPoint1: CGPoint(x: 59.45, y: 32.69), controlPoint2: CGPoint(x: 56.11, y: 35.99))
        bezierPath.addLine(to: CGPoint(x: 7.43, y: 35.99))
        bezierPath.addLine(to: CGPoint(x: 7.43, y: 43.33))
        bezierPath.addLine(to: CGPoint(x: 52.05, y: 43.33))
        bezierPath.addCurve(to: CGPoint(x: 66.92, y: 28.65), controlPoint1: CGPoint(x: 60.23, y: 43.37), controlPoint2: CGPoint(x: 66.92, y: 36.74))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 85.51, y: 28.65))
        bezier2Path.addCurve(to: CGPoint(x: 70.63, y: 43.35), controlPoint1: CGPoint(x: 77.32, y: 28.65), controlPoint2: CGPoint(x: 70.63, y: 35.26))
        bezier2Path.addLine(to: CGPoint(x: 78.08, y: 43.35))
        bezier2Path.addCurve(to: CGPoint(x: 85.51, y: 36.01), controlPoint1: CGPoint(x: 78.08, y: 39.31), controlPoint2: CGPoint(x: 81.42, y: 36.01))
        bezier2Path.addCurve(to: CGPoint(x: 92.93, y: 43.35), controlPoint1: CGPoint(x: 89.59, y: 36.01), controlPoint2: CGPoint(x: 92.93, y: 39.31))
        bezier2Path.addCurve(to: CGPoint(x: 85.51, y: 50.71), controlPoint1: CGPoint(x: 92.93, y: 47.39), controlPoint2: CGPoint(x: 89.61, y: 50.71))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 50.71))
        bezier2Path.addLine(to: CGPoint(x: 0, y: 58.05))
        bezier2Path.addLine(to: CGPoint(x: 85.53, y: 58.05))
        bezier2Path.addCurve(to: CGPoint(x: 100.4, y: 43.35), controlPoint1: CGPoint(x: 93.71, y: 58.05), controlPoint2: CGPoint(x: 100.4, y: 51.44))
        bezier2Path.addCurve(to: CGPoint(x: 85.51, y: 28.65), controlPoint1: CGPoint(x: 100.4, y: 35.26), controlPoint2: CGPoint(x: 93.69, y: 28.65))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 74.37, y: 65.41))
        bezier3Path.addLine(to: CGPoint(x: 22.3, y: 65.41))
        bezier3Path.addLine(to: CGPoint(x: 22.3, y: 72.75))
        bezier3Path.addLine(to: CGPoint(x: 74.37, y: 72.75))
        bezier3Path.addCurve(to: CGPoint(x: 78.08, y: 76.42), controlPoint1: CGPoint(x: 76.6, y: 72.75), controlPoint2: CGPoint(x: 78.08, y: 74.21))
        bezier3Path.addCurve(to: CGPoint(x: 74.37, y: 80.09), controlPoint1: CGPoint(x: 78.08, y: 78.63), controlPoint2: CGPoint(x: 76.6, y: 80.09))
        bezier3Path.addCurve(to: CGPoint(x: 70.65, y: 76.42), controlPoint1: CGPoint(x: 72.13, y: 80.09), controlPoint2: CGPoint(x: 70.65, y: 78.63))
        bezier3Path.addLine(to: CGPoint(x: 63.23, y: 76.42))
        bezier3Path.addCurve(to: CGPoint(x: 74.39, y: 87.45), controlPoint1: CGPoint(x: 63.23, y: 82.3), controlPoint2: CGPoint(x: 68.07, y: 87.45))
        bezier3Path.addCurve(to: CGPoint(x: 85.55, y: 76.42), controlPoint1: CGPoint(x: 80.7, y: 87.45), controlPoint2: CGPoint(x: 85.55, y: 82.67))
        bezier3Path.addCurve(to: CGPoint(x: 74.37, y: 65.41), controlPoint1: CGPoint(x: 85.55, y: 70.18), controlPoint2: CGPoint(x: 80.69, y: 65.41))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSunsetIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 98.22, y: 45.06))
        bezierPath.addLine(to: CGPoint(x: 73.85, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 50.08, y: 23.11), controlPoint1: CGPoint(x: 72.86, y: 32.79), controlPoint2: CGPoint(x: 62.58, y: 23.11))
        bezierPath.addCurve(to: CGPoint(x: 26.31, y: 45.06), controlPoint1: CGPoint(x: 37.58, y: 23.11), controlPoint2: CGPoint(x: 27.3, y: 32.79))
        bezierPath.addLine(to: CGPoint(x: 1.94, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 47.01), controlPoint1: CGPoint(x: 0.87, y: 45.06), controlPoint2: CGPoint(x: 0, y: 45.93))
        bezierPath.addCurve(to: CGPoint(x: 1.94, y: 48.95), controlPoint1: CGPoint(x: 0, y: 48.08), controlPoint2: CGPoint(x: 0.87, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 28.17, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 71.99, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 98.22, y: 48.95))
        bezierPath.addCurve(to: CGPoint(x: 100.16, y: 47.01), controlPoint1: CGPoint(x: 99.29, y: 48.95), controlPoint2: CGPoint(x: 100.16, y: 48.08))
        bezierPath.addCurve(to: CGPoint(x: 98.22, y: 45.06), controlPoint1: CGPoint(x: 100.16, y: 45.93), controlPoint2: CGPoint(x: 99.29, y: 45.06))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30.2, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 50.08, y: 26.99), controlPoint1: CGPoint(x: 31.18, y: 34.94), controlPoint2: CGPoint(x: 39.72, y: 26.99))
        bezierPath.addCurve(to: CGPoint(x: 69.96, y: 45.06), controlPoint1: CGPoint(x: 60.44, y: 26.99), controlPoint2: CGPoint(x: 68.98, y: 34.94))
        bezierPath.addLine(to: CGPoint(x: 30.2, y: 45.06))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSunriseIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 98.22, y: 45.06))
        bezierPath.addLine(to: CGPoint(x: 73.85, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 50.08, y: 23.11), controlPoint1: CGPoint(x: 72.86, y: 32.79), controlPoint2: CGPoint(x: 62.58, y: 23.11))
        bezierPath.addCurve(to: CGPoint(x: 26.31, y: 45.06), controlPoint1: CGPoint(x: 37.58, y: 23.11), controlPoint2: CGPoint(x: 27.3, y: 32.79))
        bezierPath.addLine(to: CGPoint(x: 1.94, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 47.01), controlPoint1: CGPoint(x: 0.87, y: 45.06), controlPoint2: CGPoint(x: 0, y: 45.93))
        bezierPath.addCurve(to: CGPoint(x: 1.94, y: 48.95), controlPoint1: CGPoint(x: 0, y: 48.08), controlPoint2: CGPoint(x: 0.87, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 28.17, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 71.99, y: 48.95))
        bezierPath.addLine(to: CGPoint(x: 98.22, y: 48.95))
        bezierPath.addCurve(to: CGPoint(x: 100.16, y: 47.01), controlPoint1: CGPoint(x: 99.29, y: 48.95), controlPoint2: CGPoint(x: 100.16, y: 48.08))
        bezierPath.addCurve(to: CGPoint(x: 98.22, y: 45.06), controlPoint1: CGPoint(x: 100.16, y: 45.93), controlPoint2: CGPoint(x: 99.29, y: 45.06))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 30.2, y: 45.06))
        bezierPath.addCurve(to: CGPoint(x: 50.08, y: 26.99), controlPoint1: CGPoint(x: 31.18, y: 34.94), controlPoint2: CGPoint(x: 39.72, y: 26.99))
        bezierPath.addCurve(to: CGPoint(x: 69.96, y: 45.06), controlPoint1: CGPoint(x: 60.44, y: 26.99), controlPoint2: CGPoint(x: 68.98, y: 34.94))
        bezierPath.addLine(to: CGPoint(x: 30.2, y: 45.06))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 48.1, y: 6.95, width: 4, height: 11), cornerRadius: 2)
        iconColor.setFill()
        rectanglePath.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 35.47, y: 20.07))
        bezier5Path.addCurve(to: CGPoint(x: 37.23, y: 21.2), controlPoint1: CGPoint(x: 35.8, y: 20.78), controlPoint2: CGPoint(x: 36.5, y: 21.2))
        bezier5Path.addCurve(to: CGPoint(x: 38.05, y: 21.02), controlPoint1: CGPoint(x: 37.51, y: 21.2), controlPoint2: CGPoint(x: 37.78, y: 21.14))
        bezier5Path.addCurve(to: CGPoint(x: 38.99, y: 18.44), controlPoint1: CGPoint(x: 39.02, y: 20.57), controlPoint2: CGPoint(x: 39.44, y: 19.41))
        bezier5Path.addLine(to: CGPoint(x: 35.83, y: 11.62))
        bezier5Path.addCurve(to: CGPoint(x: 33.26, y: 10.67), controlPoint1: CGPoint(x: 35.38, y: 10.64), controlPoint2: CGPoint(x: 34.23, y: 10.22))
        bezier5Path.addCurve(to: CGPoint(x: 32.31, y: 13.25), controlPoint1: CGPoint(x: 32.28, y: 11.12), controlPoint2: CGPoint(x: 31.86, y: 12.28))
        bezier5Path.addLine(to: CGPoint(x: 35.47, y: 20.07))
        bezier5Path.close()
        iconColor.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 19.79, y: 23.88))
        bezier6Path.addLine(to: CGPoint(x: 25.52, y: 28.74))
        bezier6Path.addCurve(to: CGPoint(x: 26.77, y: 29.2), controlPoint1: CGPoint(x: 25.88, y: 29.05), controlPoint2: CGPoint(x: 26.33, y: 29.2))
        bezier6Path.addCurve(to: CGPoint(x: 28.25, y: 28.51), controlPoint1: CGPoint(x: 27.32, y: 29.2), controlPoint2: CGPoint(x: 27.87, y: 28.96))
        bezier6Path.addCurve(to: CGPoint(x: 28.02, y: 25.77), controlPoint1: CGPoint(x: 28.94, y: 27.69), controlPoint2: CGPoint(x: 28.84, y: 26.46))
        bezier6Path.addLine(to: CGPoint(x: 22.29, y: 20.91))
        bezier6Path.addCurve(to: CGPoint(x: 19.56, y: 21.14), controlPoint1: CGPoint(x: 21.48, y: 20.22), controlPoint2: CGPoint(x: 20.25, y: 20.32))
        bezier6Path.addCurve(to: CGPoint(x: 19.79, y: 23.88), controlPoint1: CGPoint(x: 18.87, y: 21.96), controlPoint2: CGPoint(x: 18.97, y: 23.19))
        bezier6Path.close()
        iconColor.setFill()
        bezier6Path.fill()


        //// Bezier 7 Drawing
        let bezier7Path = UIBezierPath()
        bezier7Path.move(to: CGPoint(x: 12.89, y: 38.81))
        bezier7Path.addLine(to: CGPoint(x: 20.13, y: 40.8))
        bezier7Path.addCurve(to: CGPoint(x: 20.64, y: 40.87), controlPoint1: CGPoint(x: 20.3, y: 40.85), controlPoint2: CGPoint(x: 20.47, y: 40.87))
        bezier7Path.addCurve(to: CGPoint(x: 22.51, y: 39.44), controlPoint1: CGPoint(x: 21.49, y: 40.87), controlPoint2: CGPoint(x: 22.27, y: 40.3))
        bezier7Path.addCurve(to: CGPoint(x: 21.15, y: 37.05), controlPoint1: CGPoint(x: 22.79, y: 38.4), controlPoint2: CGPoint(x: 22.19, y: 37.33))
        bezier7Path.addLine(to: CGPoint(x: 13.92, y: 35.06))
        bezier7Path.addCurve(to: CGPoint(x: 11.53, y: 36.42), controlPoint1: CGPoint(x: 12.88, y: 34.78), controlPoint2: CGPoint(x: 11.81, y: 35.39))
        bezier7Path.addCurve(to: CGPoint(x: 12.89, y: 38.81), controlPoint1: CGPoint(x: 11.25, y: 37.46), controlPoint2: CGPoint(x: 11.86, y: 38.53))
        bezier7Path.close()
        iconColor.setFill()
        bezier7Path.fill()


        //// Bezier 8 Drawing
        let bezier8Path = UIBezierPath()
        bezier8Path.move(to: CGPoint(x: 62.11, y: 21.02))
        bezier8Path.addCurve(to: CGPoint(x: 62.93, y: 21.2), controlPoint1: CGPoint(x: 62.38, y: 21.14), controlPoint2: CGPoint(x: 62.66, y: 21.2))
        bezier8Path.addCurve(to: CGPoint(x: 64.69, y: 20.07), controlPoint1: CGPoint(x: 63.66, y: 21.2), controlPoint2: CGPoint(x: 64.36, y: 20.78))
        bezier8Path.addLine(to: CGPoint(x: 67.85, y: 13.25))
        bezier8Path.addCurve(to: CGPoint(x: 66.9, y: 10.67), controlPoint1: CGPoint(x: 68.3, y: 12.28), controlPoint2: CGPoint(x: 67.88, y: 11.12))
        bezier8Path.addCurve(to: CGPoint(x: 64.33, y: 11.62), controlPoint1: CGPoint(x: 65.93, y: 10.22), controlPoint2: CGPoint(x: 64.78, y: 10.64))
        bezier8Path.addLine(to: CGPoint(x: 61.17, y: 18.44))
        bezier8Path.addCurve(to: CGPoint(x: 62.11, y: 21.02), controlPoint1: CGPoint(x: 60.72, y: 19.41), controlPoint2: CGPoint(x: 61.14, y: 20.57))
        bezier8Path.close()
        iconColor.setFill()
        bezier8Path.fill()


        //// Bezier 9 Drawing
        let bezier9Path = UIBezierPath()
        bezier9Path.move(to: CGPoint(x: 73.39, y: 29.2))
        bezier9Path.addCurve(to: CGPoint(x: 74.64, y: 28.74), controlPoint1: CGPoint(x: 73.84, y: 29.2), controlPoint2: CGPoint(x: 74.28, y: 29.05))
        bezier9Path.addLine(to: CGPoint(x: 80.37, y: 23.88))
        bezier9Path.addCurve(to: CGPoint(x: 80.6, y: 21.14), controlPoint1: CGPoint(x: 81.19, y: 23.19), controlPoint2: CGPoint(x: 81.29, y: 21.96))
        bezier9Path.addCurve(to: CGPoint(x: 77.87, y: 20.91), controlPoint1: CGPoint(x: 79.91, y: 20.32), controlPoint2: CGPoint(x: 78.69, y: 20.22))
        bezier9Path.addLine(to: CGPoint(x: 72.14, y: 25.77))
        bezier9Path.addCurve(to: CGPoint(x: 71.91, y: 28.51), controlPoint1: CGPoint(x: 71.32, y: 26.46), controlPoint2: CGPoint(x: 71.22, y: 27.69))
        bezier9Path.addCurve(to: CGPoint(x: 73.39, y: 29.2), controlPoint1: CGPoint(x: 72.29, y: 28.96), controlPoint2: CGPoint(x: 72.84, y: 29.2))
        bezier9Path.close()
        iconColor.setFill()
        bezier9Path.fill()


        //// Bezier 10 Drawing
        let bezier10Path = UIBezierPath()
        bezier10Path.move(to: CGPoint(x: 77.65, y: 39.44))
        bezier10Path.addCurve(to: CGPoint(x: 79.52, y: 40.87), controlPoint1: CGPoint(x: 77.89, y: 40.3), controlPoint2: CGPoint(x: 78.67, y: 40.87))
        bezier10Path.addCurve(to: CGPoint(x: 80.03, y: 40.8), controlPoint1: CGPoint(x: 79.69, y: 40.87), controlPoint2: CGPoint(x: 79.86, y: 40.85))
        bezier10Path.addLine(to: CGPoint(x: 87.27, y: 38.81))
        bezier10Path.addCurve(to: CGPoint(x: 88.63, y: 36.42), controlPoint1: CGPoint(x: 88.3, y: 38.53), controlPoint2: CGPoint(x: 88.91, y: 37.46))
        bezier10Path.addCurve(to: CGPoint(x: 86.25, y: 35.06), controlPoint1: CGPoint(x: 88.35, y: 35.39), controlPoint2: CGPoint(x: 87.28, y: 34.78))
        bezier10Path.addLine(to: CGPoint(x: 79.01, y: 37.05))
        bezier10Path.addCurve(to: CGPoint(x: 77.65, y: 39.44), controlPoint1: CGPoint(x: 77.98, y: 37.33), controlPoint2: CGPoint(x: 77.37, y: 38.4))
        bezier10Path.close()
        iconColor.setFill()
        bezier10Path.fill()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
