//
//  StyleKit.swift
//  WeatherApp
//
//  Created by Juan Gestal on 11/8/18.
//  Copyright Â© 2018 Juan Gestal. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class StyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let flatBlackLight: UIColor = UIColor(red: 0.153, green: 0.153, blue: 0.153, alpha: 1.000)
        static let flatWhiteLight: UIColor = UIColor(red: 0.866, green: 0.882, blue: 0.887, alpha: 1.000)
    }

    //// Colors

    @objc dynamic public class var flatBlackLight: UIColor { return Cache.flatBlackLight }
    @objc dynamic public class var flatWhiteLight: UIColor { return Cache.flatWhiteLight }

    //// Drawing Methods

    @objc dynamic public class func drawCompassDisplay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, compassAngle: CGFloat = -25, compassVelocityText: String = "8 mph", dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let lightTextColor1 = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let lightTextColor2 = UIColor(red: 0.180, green: 0.454, blue: 0.687, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let compassDisplayAngle: CGFloat = compassAngle - 90
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let iconColor = dayTheme ? iconColor1 : iconColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let lightTextColor = dayTheme ? lightTextColor1 : lightTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 300))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 161)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "N"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 140, y: 252, width: 40, height: 48)
        let text2TextContent = "S"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "E"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 260, y: 136, width: 40, height: 48)
        let text4TextContent = "W"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// NE Drawing
        let nERect = CGRect(x: 60, y: 53, width: 40, height: 48)
        let nETextContent = "NE"
        let nEStyle = NSMutableParagraphStyle()
        nEStyle.alignment = .center
        let nEFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nEStyle,
        ] as [NSAttributedStringKey: Any]

        let nETextHeight: CGFloat = nETextContent.boundingRect(with: CGSize(width: nERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nERect)
        nETextContent.draw(in: CGRect(x: nERect.minX, y: nERect.minY + (nERect.height - nETextHeight) / 2, width: nERect.width, height: nETextHeight), withAttributes: nEFontAttributes)
        context.restoreGState()


        //// NE 2 Drawing
        let nE2Rect = CGRect(x: 220, y: 52, width: 40, height: 48)
        let nE2TextContent = "NW"
        let nE2Style = NSMutableParagraphStyle()
        nE2Style.alignment = .center
        let nE2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE2Style,
        ] as [NSAttributedStringKey: Any]

        let nE2TextHeight: CGFloat = nE2TextContent.boundingRect(with: CGSize(width: nE2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE2Rect)
        nE2TextContent.draw(in: CGRect(x: nE2Rect.minX, y: nE2Rect.minY + (nE2Rect.height - nE2TextHeight) / 2, width: nE2Rect.width, height: nE2TextHeight), withAttributes: nE2FontAttributes)
        context.restoreGState()


        //// NE 3 Drawing
        let nE3Rect = CGRect(x: 60, y: 220, width: 40, height: 48)
        let nE3TextContent = "SE"
        let nE3Style = NSMutableParagraphStyle()
        nE3Style.alignment = .center
        let nE3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE3Style,
        ] as [NSAttributedStringKey: Any]

        let nE3TextHeight: CGFloat = nE3TextContent.boundingRect(with: CGSize(width: nE3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE3Rect)
        nE3TextContent.draw(in: CGRect(x: nE3Rect.minX, y: nE3Rect.minY + (nE3Rect.height - nE3TextHeight) / 2, width: nE3Rect.width, height: nE3TextHeight), withAttributes: nE3FontAttributes)
        context.restoreGState()


        //// NE 4 Drawing
        let nE4Rect = CGRect(x: 220, y: 220, width: 40, height: 48)
        let nE4TextContent = "SW"
        let nE4Style = NSMutableParagraphStyle()
        nE4Style.alignment = .center
        let nE4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE4Style,
        ] as [NSAttributedStringKey: Any]

        let nE4TextHeight: CGFloat = nE4TextContent.boundingRect(with: CGSize(width: nE4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE4Rect)
        nE4TextContent.draw(in: CGRect(x: nE4Rect.minX, y: nE4Rect.minY + (nE4Rect.height - nE4TextHeight) / 2, width: nE4Rect.width, height: nE4TextHeight), withAttributes: nE4FontAttributes)
        context.restoreGState()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 188.2, y: 77.2))
        bezierPath.addCurve(to: CGPoint(x: 179.2, y: 81.1), controlPoint1: CGPoint(x: 184.8, y: 77.2), controlPoint2: CGPoint(x: 181.5, y: 78.6))
        bezierPath.addCurve(to: CGPoint(x: 179.4, y: 86.8), controlPoint1: CGPoint(x: 177.7, y: 82.7), controlPoint2: CGPoint(x: 177.8, y: 85.2))
        bezierPath.addCurve(to: CGPoint(x: 185.1, y: 86.6), controlPoint1: CGPoint(x: 181, y: 88.3), controlPoint2: CGPoint(x: 183.5, y: 88.2))
        bezierPath.addCurve(to: CGPoint(x: 188.2, y: 85.2), controlPoint1: CGPoint(x: 185.9, y: 85.7), controlPoint2: CGPoint(x: 187, y: 85.2))
        bezierPath.addCurve(to: CGPoint(x: 192.5, y: 89.5), controlPoint1: CGPoint(x: 190.6, y: 85.2), controlPoint2: CGPoint(x: 192.5, y: 87.1))
        bezierPath.addCurve(to: CGPoint(x: 188.2, y: 93.8), controlPoint1: CGPoint(x: 192.5, y: 91.9), controlPoint2: CGPoint(x: 190.6, y: 93.8))
        bezierPath.addLine(to: CGPoint(x: 124.5, y: 93.8))
        bezierPath.addCurve(to: CGPoint(x: 120.5, y: 97.8), controlPoint1: CGPoint(x: 122.3, y: 93.8), controlPoint2: CGPoint(x: 120.5, y: 95.6))
        bezierPath.addCurve(to: CGPoint(x: 124.5, y: 101.8), controlPoint1: CGPoint(x: 120.5, y: 100), controlPoint2: CGPoint(x: 122.3, y: 101.8))
        bezierPath.addLine(to: CGPoint(x: 188.2, y: 101.8))
        bezierPath.addCurve(to: CGPoint(x: 200.5, y: 89.5), controlPoint1: CGPoint(x: 195, y: 101.8), controlPoint2: CGPoint(x: 200.5, y: 96.3))
        bezierPath.addCurve(to: CGPoint(x: 188.2, y: 77.2), controlPoint1: CGPoint(x: 200.5, y: 82.7), controlPoint2: CGPoint(x: 195, y: 77.2))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 170, y: 107.2))
        bezier2Path.addLine(to: CGPoint(x: 124.5, y: 107.2))
        bezier2Path.addCurve(to: CGPoint(x: 120.5, y: 111.2), controlPoint1: CGPoint(x: 122.3, y: 107.2), controlPoint2: CGPoint(x: 120.5, y: 109))
        bezier2Path.addCurve(to: CGPoint(x: 124.5, y: 115.2), controlPoint1: CGPoint(x: 120.5, y: 113.4), controlPoint2: CGPoint(x: 122.3, y: 115.2))
        bezier2Path.addLine(to: CGPoint(x: 170, y: 115.2))
        bezier2Path.addCurve(to: CGPoint(x: 174.3, y: 119.5), controlPoint1: CGPoint(x: 172.4, y: 115.2), controlPoint2: CGPoint(x: 174.3, y: 117.1))
        bezier2Path.addCurve(to: CGPoint(x: 170, y: 123.8), controlPoint1: CGPoint(x: 174.3, y: 121.9), controlPoint2: CGPoint(x: 172.4, y: 123.8))
        bezier2Path.addCurve(to: CGPoint(x: 166.9, y: 122.4), controlPoint1: CGPoint(x: 168.8, y: 123.8), controlPoint2: CGPoint(x: 167.7, y: 123.3))
        bezier2Path.addCurve(to: CGPoint(x: 161.2, y: 122.2), controlPoint1: CGPoint(x: 165.4, y: 120.8), controlPoint2: CGPoint(x: 162.9, y: 120.7))
        bezier2Path.addCurve(to: CGPoint(x: 161, y: 127.9), controlPoint1: CGPoint(x: 159.6, y: 123.7), controlPoint2: CGPoint(x: 159.5, y: 126.2))
        bezier2Path.addCurve(to: CGPoint(x: 170, y: 131.8), controlPoint1: CGPoint(x: 163.3, y: 130.4), controlPoint2: CGPoint(x: 166.6, y: 131.8))
        bezier2Path.addCurve(to: CGPoint(x: 182.3, y: 119.5), controlPoint1: CGPoint(x: 176.8, y: 131.8), controlPoint2: CGPoint(x: 182.3, y: 126.3))
        bezier2Path.addCurve(to: CGPoint(x: 170, y: 107.2), controlPoint1: CGPoint(x: 182.2, y: 112.7), controlPoint2: CGPoint(x: 176.7, y: 107.2))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = compassVelocityText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        compassVelocityText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Group 2
        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -compassDisplayAngle * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -98.22))
        polygonPath.addLine(to: CGPoint(x: 11.26, y: 49.11))
        polygonPath.addLine(to: CGPoint(x: -11.26, y: 49.11))
        polygonPath.close()
        indicatorColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawTermometer(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 160, height: 320), resizing: ResizingBehavior = .aspectFit, termometerDegrees: CGFloat = 57, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 160, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 160, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let lightTextColor1 = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let termometerColor1 = UIColor(red: 0.469, green: 0.514, blue: 0.518, alpha: 1.000)
        let termometerIndicator1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let lightTextColor2 = UIColor(red: 0.180, green: 0.454, blue: 0.687, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let termometerColor2 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let termometerIndicator2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let termometer0 = UIColor(red: 0.224, green: 0.555, blue: 0.829, alpha: 1.000)
        let termometer10 = UIColor(red: 0.938, green: 0.770, blue: 0.000, alpha: 1.000)
        let termometer20 = UIColor(red: 0.839, green: 0.472, blue: 0.000, alpha: 1.000)
        let termometer30 = UIColor(red: 0.757, green: 0.317, blue: 0.000, alpha: 1.000)
        let termometer40 = UIColor(red: 0.832, green: 0.286, blue: 0.195, alpha: 1.000)

        //// Variable Declarations
        let termometerDisplayYScale: CGFloat = termometerDegrees * 0.02 < 0 ? 0 : (termometerDegrees * 0.02 > 1 ? 1 : termometerDegrees * 0.02)
        let termometerTemperatureColor = termometerDegrees < 10 ? termometer0 : (termometerDegrees < 20 ? termometer10 : (termometerDegrees < 30 ? termometer20 : (termometerDegrees < 40 ? termometer30 : termometer40)))
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let lightTextColor = dayTheme ? lightTextColor1 : lightTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let termometerColor = dayTheme ? termometerColor1 : termometerColor2
        let termometerIndicator = dayTheme ? termometerIndicator1 : termometerIndicator2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 28, y: 205, width: 104, height: 104))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 90, y: 42))
        bezier2Path.addCurve(to: CGPoint(x: 89.95, y: 43), controlPoint1: CGPoint(x: 90, y: 42.34), controlPoint2: CGPoint(x: 89.98, y: 42.67))
        bezier2Path.addCurve(to: CGPoint(x: 90, y: 245.51), controlPoint1: CGPoint(x: 89.99, y: 43), controlPoint2: CGPoint(x: 90, y: 206.11))
        bezier2Path.addCurve(to: CGPoint(x: 95.25, y: 253.15), controlPoint1: CGPoint(x: 92.43, y: 247.46), controlPoint2: CGPoint(x: 94.28, y: 250.11))
        bezier2Path.addCurve(to: CGPoint(x: 96, y: 258), controlPoint1: CGPoint(x: 95.74, y: 254.68), controlPoint2: CGPoint(x: 96, y: 256.31))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 274), controlPoint1: CGPoint(x: 96, y: 266.84), controlPoint2: CGPoint(x: 88.84, y: 274))
        bezier2Path.addCurve(to: CGPoint(x: 64, y: 258), controlPoint1: CGPoint(x: 71.16, y: 274), controlPoint2: CGPoint(x: 64, y: 266.84))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 245.51), controlPoint1: CGPoint(x: 64, y: 252.95), controlPoint2: CGPoint(x: 66.34, y: 248.44))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 43), controlPoint1: CGPoint(x: 70, y: 206.11), controlPoint2: CGPoint(x: 70, y: 43))
        bezier2Path.addCurve(to: CGPoint(x: 70, y: 42), controlPoint1: CGPoint(x: 70.02, y: 42.67), controlPoint2: CGPoint(x: 70, y: 42.34))
        bezier2Path.addCurve(to: CGPoint(x: 72.47, y: 35.42), controlPoint1: CGPoint(x: 70, y: 39.48), controlPoint2: CGPoint(x: 70.93, y: 37.18))
        bezier2Path.addCurve(to: CGPoint(x: 80, y: 32), controlPoint1: CGPoint(x: 74.3, y: 33.33), controlPoint2: CGPoint(x: 76.99, y: 32))
        bezier2Path.addCurve(to: CGPoint(x: 90, y: 42), controlPoint1: CGPoint(x: 85.52, y: 32), controlPoint2: CGPoint(x: 90, y: 36.48))
        bezier2Path.close()
        UIColor.black.setFill()
        bezier2Path.fill()


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 56, y: 240, width: 47, height: 42))
        termometerTemperatureColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 96, y: 246)
        context.scaleBy(x: 1, y: termometerDisplayYScale)

        let rectangle2Path = UIBezierPath(rect: CGRect(x: -32, y: -214, width: 32, height: 214))
        termometerTemperatureColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        let rectangle4Path = UIBezierPath(rect: CGRect(x: 56, y: 69, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle4Path.fill()


        //// Rectangle 5 Drawing
        let rectangle5Path = UIBezierPath(rect: CGRect(x: 56, y: 113, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle5Path.fill()


        //// Rectangle 6 Drawing
        let rectangle6Path = UIBezierPath(rect: CGRect(x: 56, y: 157, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle6Path.fill()


        //// Rectangle 7 Drawing
        let rectangle7Path = UIBezierPath(rect: CGRect(x: 56, y: 201, width: 12, height: 4))
        UIColor.gray.setFill()
        rectangle7Path.fill()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 6, y: 179, width: 40, height: 48)
        let text4TextContent = "10"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .right
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 6, y: 136, width: 40, height: 48)
        let textTextContent = "20"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .right
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 6, y: 93, width: 40, height: 48)
        let text2TextContent = "30"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .right
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 6, y: 50, width: 40, height: 48)
        let text3TextContent = "40"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .right
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 16)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 80, y: 32))
        bezier4Path.addCurve(to: CGPoint(x: 75.26, y: 33.19), controlPoint1: CGPoint(x: 78.29, y: 32), controlPoint2: CGPoint(x: 76.67, y: 32.43))
        bezier4Path.addCurve(to: CGPoint(x: 72.47, y: 35.42), controlPoint1: CGPoint(x: 74.2, y: 33.76), controlPoint2: CGPoint(x: 73.25, y: 34.52))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 42), controlPoint1: CGPoint(x: 70.93, y: 37.18), controlPoint2: CGPoint(x: 70, y: 39.48))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 43), controlPoint1: CGPoint(x: 70, y: 42.34), controlPoint2: CGPoint(x: 70.02, y: 42.67))
        bezier4Path.addCurve(to: CGPoint(x: 70, y: 245.51), controlPoint1: CGPoint(x: 70, y: 43), controlPoint2: CGPoint(x: 70, y: 206.11))
        bezier4Path.addCurve(to: CGPoint(x: 64, y: 258), controlPoint1: CGPoint(x: 66.34, y: 248.44), controlPoint2: CGPoint(x: 64, y: 252.95))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 274), controlPoint1: CGPoint(x: 64, y: 266.84), controlPoint2: CGPoint(x: 71.16, y: 274))
        bezier4Path.addCurve(to: CGPoint(x: 96, y: 258), controlPoint1: CGPoint(x: 88.84, y: 274), controlPoint2: CGPoint(x: 96, y: 266.84))
        bezier4Path.addCurve(to: CGPoint(x: 95.25, y: 253.15), controlPoint1: CGPoint(x: 96, y: 256.31), controlPoint2: CGPoint(x: 95.74, y: 254.68))
        bezier4Path.addCurve(to: CGPoint(x: 90, y: 245.51), controlPoint1: CGPoint(x: 94.28, y: 250.11), controlPoint2: CGPoint(x: 92.43, y: 247.46))
        bezier4Path.addCurve(to: CGPoint(x: 89.95, y: 43), controlPoint1: CGPoint(x: 90, y: 206.11), controlPoint2: CGPoint(x: 89.99, y: 43))
        bezier4Path.addCurve(to: CGPoint(x: 90, y: 42), controlPoint1: CGPoint(x: 89.98, y: 42.67), controlPoint2: CGPoint(x: 90, y: 42.34))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 32), controlPoint1: CGPoint(x: 90, y: 36.48), controlPoint2: CGPoint(x: 85.52, y: 32))
        bezier4Path.close()
        bezier4Path.move(to: CGPoint(x: 110, y: 39))
        bezier4Path.addCurve(to: CGPoint(x: 109.93, y: 41), controlPoint1: CGPoint(x: 110, y: 39.67), controlPoint2: CGPoint(x: 109.98, y: 40.34))
        bezier4Path.addCurve(to: CGPoint(x: 110, y: 226.9), controlPoint1: CGPoint(x: 110, y: 41), controlPoint2: CGPoint(x: 110, y: 170.98))
        bezier4Path.addCurve(to: CGPoint(x: 112.42, y: 229.62), controlPoint1: CGPoint(x: 110.85, y: 227.77), controlPoint2: CGPoint(x: 111.65, y: 228.68))
        bezier4Path.addCurve(to: CGPoint(x: 122, y: 256.5), controlPoint1: CGPoint(x: 118.41, y: 236.95), controlPoint2: CGPoint(x: 122, y: 246.3))
        bezier4Path.addCurve(to: CGPoint(x: 79.5, y: 299), controlPoint1: CGPoint(x: 122, y: 279.97), controlPoint2: CGPoint(x: 102.97, y: 299))
        bezier4Path.addCurve(to: CGPoint(x: 37, y: 256.5), controlPoint1: CGPoint(x: 56.03, y: 299), controlPoint2: CGPoint(x: 37, y: 279.97))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 225.91), controlPoint1: CGPoint(x: 37, y: 244.49), controlPoint2: CGPoint(x: 41.99, y: 233.64))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 41), controlPoint1: CGPoint(x: 50, y: 169.45), controlPoint2: CGPoint(x: 50, y: 41))
        bezier4Path.addLine(to: CGPoint(x: 50.07, y: 41))
        bezier4Path.addCurve(to: CGPoint(x: 50, y: 39), controlPoint1: CGPoint(x: 50.02, y: 40.34), controlPoint2: CGPoint(x: 50, y: 39.67))
        bezier4Path.addCurve(to: CGPoint(x: 58.51, y: 18.07), controlPoint1: CGPoint(x: 50, y: 30.86), controlPoint2: CGPoint(x: 53.24, y: 23.47))
        bezier4Path.addCurve(to: CGPoint(x: 80, y: 9), controlPoint1: CGPoint(x: 64.01, y: 12.45), controlPoint2: CGPoint(x: 71.6, y: 9))
        bezier4Path.addCurve(to: CGPoint(x: 110, y: 39), controlPoint1: CGPoint(x: 96.57, y: 9), controlPoint2: CGPoint(x: 110, y: 22.43))
        bezier4Path.close()
        termometerColor.setFill()
        bezier4Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 80, y: 32))
        bezier3Path.addCurve(to: CGPoint(x: 72.47, y: 35.42), controlPoint1: CGPoint(x: 76.99, y: 32), controlPoint2: CGPoint(x: 74.3, y: 33.33))
        bezier3Path.addCurve(to: CGPoint(x: 70.74, y: 38.21), controlPoint1: CGPoint(x: 71.75, y: 36.25), controlPoint2: CGPoint(x: 71.16, y: 37.19))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 42), controlPoint1: CGPoint(x: 70.26, y: 39.38), controlPoint2: CGPoint(x: 70, y: 40.66))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 43), controlPoint1: CGPoint(x: 70, y: 42.34), controlPoint2: CGPoint(x: 70.02, y: 42.67))
        bezier3Path.addCurve(to: CGPoint(x: 70, y: 245.51), controlPoint1: CGPoint(x: 70, y: 43), controlPoint2: CGPoint(x: 70, y: 206.11))
        bezier3Path.addCurve(to: CGPoint(x: 64, y: 258), controlPoint1: CGPoint(x: 66.34, y: 248.44), controlPoint2: CGPoint(x: 64, y: 252.95))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 274), controlPoint1: CGPoint(x: 64, y: 266.84), controlPoint2: CGPoint(x: 71.16, y: 274))
        bezier3Path.addCurve(to: CGPoint(x: 96, y: 258), controlPoint1: CGPoint(x: 88.84, y: 274), controlPoint2: CGPoint(x: 96, y: 266.84))
        bezier3Path.addCurve(to: CGPoint(x: 95.25, y: 253.15), controlPoint1: CGPoint(x: 96, y: 256.31), controlPoint2: CGPoint(x: 95.74, y: 254.68))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 245.51), controlPoint1: CGPoint(x: 94.28, y: 250.11), controlPoint2: CGPoint(x: 92.43, y: 247.46))
        bezier3Path.addCurve(to: CGPoint(x: 89.95, y: 43), controlPoint1: CGPoint(x: 90, y: 206.11), controlPoint2: CGPoint(x: 89.99, y: 43))
        bezier3Path.addCurve(to: CGPoint(x: 90, y: 42), controlPoint1: CGPoint(x: 89.98, y: 42.67), controlPoint2: CGPoint(x: 90, y: 42.34))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 32), controlPoint1: CGPoint(x: 90, y: 36.48), controlPoint2: CGPoint(x: 85.52, y: 32))
        bezier3Path.close()
        bezier3Path.move(to: CGPoint(x: 95, y: 40))
        bezier3Path.addCurve(to: CGPoint(x: 94.87, y: 42), controlPoint1: CGPoint(x: 95, y: 40.68), controlPoint2: CGPoint(x: 94.96, y: 41.35))
        bezier3Path.addLine(to: CGPoint(x: 95, y: 42))
        bezier3Path.addCurve(to: CGPoint(x: 95, y: 240.84), controlPoint1: CGPoint(x: 95, y: 42), controlPoint2: CGPoint(x: 95, y: 190.83))
        bezier3Path.addCurve(to: CGPoint(x: 100.93, y: 248.85), controlPoint1: CGPoint(x: 97.51, y: 243.04), controlPoint2: CGPoint(x: 99.54, y: 245.77))
        bezier3Path.addCurve(to: CGPoint(x: 103, y: 258.5), controlPoint1: CGPoint(x: 102.26, y: 251.79), controlPoint2: CGPoint(x: 103, y: 255.06))
        bezier3Path.addCurve(to: CGPoint(x: 79.5, y: 282), controlPoint1: CGPoint(x: 103, y: 271.48), controlPoint2: CGPoint(x: 92.48, y: 282))
        bezier3Path.addCurve(to: CGPoint(x: 56, y: 258.5), controlPoint1: CGPoint(x: 66.52, y: 282), controlPoint2: CGPoint(x: 56, y: 271.48))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 240.01), controlPoint1: CGPoint(x: 56, y: 250.99), controlPoint2: CGPoint(x: 59.52, y: 244.31))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 42), controlPoint1: CGPoint(x: 65, y: 189.21), controlPoint2: CGPoint(x: 65, y: 42))
        bezier3Path.addLine(to: CGPoint(x: 65.13, y: 42))
        bezier3Path.addCurve(to: CGPoint(x: 65, y: 40), controlPoint1: CGPoint(x: 65.04, y: 41.35), controlPoint2: CGPoint(x: 65, y: 40.68))
        bezier3Path.addCurve(to: CGPoint(x: 66.04, y: 34.5), controlPoint1: CGPoint(x: 65, y: 38.06), controlPoint2: CGPoint(x: 65.37, y: 36.2))
        bezier3Path.addCurve(to: CGPoint(x: 68.76, y: 30.07), controlPoint1: CGPoint(x: 66.69, y: 32.86), controlPoint2: CGPoint(x: 67.61, y: 31.37))
        bezier3Path.addCurve(to: CGPoint(x: 80, y: 25), controlPoint1: CGPoint(x: 71.53, y: 26.95), controlPoint2: CGPoint(x: 75.54, y: 25))
        bezier3Path.addCurve(to: CGPoint(x: 95, y: 40), controlPoint1: CGPoint(x: 88.28, y: 25), controlPoint2: CGPoint(x: 95, y: 31.72))
        bezier3Path.close()
        termometerIndicator.setFill()
        bezier3Path.fill()


        //// Rectangle 3 Drawing
        let rectangle3Path = UIBezierPath(rect: CGRect(x: 55, y: 72, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle3Path.fill()


        //// Rectangle 8 Drawing
        let rectangle8Path = UIBezierPath(rect: CGRect(x: 55, y: 115, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle8Path.fill()


        //// Rectangle 9 Drawing
        let rectangle9Path = UIBezierPath(rect: CGRect(x: 55, y: 158, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle9Path.fill()


        //// Rectangle 10 Drawing
        let rectangle10Path = UIBezierPath(rect: CGRect(x: 55, y: 201, width: 12, height: 5))
        termometerIndicator.setFill()
        rectangle10Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHumidityDisplay(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, humidity: CGFloat = 0, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let lightTextColor1 = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let lightTextColor2 = UIColor(red: 0.180, green: 0.454, blue: 0.687, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let humidityDisplayAngle: CGFloat = -180 * humidity + 90
        let humidityDisplayText = "\(Int(round(humidity * 100)))" + " %"
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let iconColor = dayTheme ? iconColor1 : iconColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let lightTextColor = dayTheme ? lightTextColor1 : lightTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 30))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 64.54, y: 64.54)
        context.rotate(by: -45 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -15, width: 6, height: 30), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 255.46, y: 65.54)
        context.rotate(by: 45 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -15, width: 6, height: 30), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "50"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "0"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 243, y: 136, width: 57, height: 48)
        let text4TextContent = "100"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()


        //// NE Drawing
        let nERect = CGRect(x: 60, y: 53, width: 40, height: 48)
        let nETextContent = "25"
        let nEStyle = NSMutableParagraphStyle()
        nEStyle.alignment = .center
        let nEFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nEStyle,
        ] as [NSAttributedStringKey: Any]

        let nETextHeight: CGFloat = nETextContent.boundingRect(with: CGSize(width: nERect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nEFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nERect)
        nETextContent.draw(in: CGRect(x: nERect.minX, y: nERect.minY + (nERect.height - nETextHeight) / 2, width: nERect.width, height: nETextHeight), withAttributes: nEFontAttributes)
        context.restoreGState()


        //// NE 2 Drawing
        let nE2Rect = CGRect(x: 220, y: 53, width: 40, height: 48)
        let nE2TextContent = "75"
        let nE2Style = NSMutableParagraphStyle()
        nE2Style.alignment = .center
        let nE2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: lightTextColor,
            .paragraphStyle: nE2Style,
        ] as [NSAttributedStringKey: Any]

        let nE2TextHeight: CGFloat = nE2TextContent.boundingRect(with: CGSize(width: nE2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: nE2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: nE2Rect)
        nE2TextContent.draw(in: CGRect(x: nE2Rect.minX, y: nE2Rect.minY + (nE2Rect.height - nE2TextHeight) / 2, width: nE2Rect.width, height: nE2TextHeight), withAttributes: nE2FontAttributes)
        context.restoreGState()


        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 164.4, y: 108.2))
        bezierPath.addCurve(to: CGPoint(x: 162, y: 109.4), controlPoint1: CGPoint(x: 163.5, y: 108.2), controlPoint2: CGPoint(x: 162.6, y: 108.6))
        bezierPath.addCurve(to: CGPoint(x: 154.6, y: 125.1), controlPoint1: CGPoint(x: 160.8, y: 111), controlPoint2: CGPoint(x: 154.6, y: 119.5))
        bezierPath.addCurve(to: CGPoint(x: 164.4, y: 135.6), controlPoint1: CGPoint(x: 154.6, y: 131.7), controlPoint2: CGPoint(x: 159.6, y: 135.6))
        bezierPath.addLine(to: CGPoint(x: 164.4, y: 135.6))
        bezierPath.addCurve(to: CGPoint(x: 174.2, y: 125.1), controlPoint1: CGPoint(x: 169.2, y: 135.6), controlPoint2: CGPoint(x: 174.2, y: 131.7))
        bezierPath.addCurve(to: CGPoint(x: 170.4, y: 114.8), controlPoint1: CGPoint(x: 174.2, y: 122.5), controlPoint2: CGPoint(x: 172.9, y: 119.1))
        bezierPath.addCurve(to: CGPoint(x: 164.4, y: 108.2), controlPoint1: CGPoint(x: 167.7, y: 110.1), controlPoint2: CGPoint(x: 166.5, y: 108.2))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 150, y: 88.2))
        bezier2Path.addCurve(to: CGPoint(x: 147.6, y: 87), controlPoint1: CGPoint(x: 149.4, y: 87.5), controlPoint2: CGPoint(x: 148.5, y: 87))
        bezier2Path.addCurve(to: CGPoint(x: 145.2, y: 88.2), controlPoint1: CGPoint(x: 146.7, y: 87), controlPoint2: CGPoint(x: 145.8, y: 87.4))
        bezier2Path.addCurve(to: CGPoint(x: 140, y: 99.3), controlPoint1: CGPoint(x: 144, y: 89.8), controlPoint2: CGPoint(x: 140, y: 95.3))
        bezier2Path.addCurve(to: CGPoint(x: 147.6, y: 107.3), controlPoint1: CGPoint(x: 140, y: 104.3), controlPoint2: CGPoint(x: 143.8, y: 107.3))
        bezier2Path.addCurve(to: CGPoint(x: 155.2, y: 99.3), controlPoint1: CGPoint(x: 151.4, y: 107.3), controlPoint2: CGPoint(x: 155.2, y: 104.3))
        bezier2Path.addCurve(to: CGPoint(x: 150, y: 88.2), controlPoint1: CGPoint(x: 155.2, y: 95.3), controlPoint2: CGPoint(x: 151.2, y: 89.8))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 179.2, y: 82.7))
        bezier3Path.addCurve(to: CGPoint(x: 175.2, y: 79.1), controlPoint1: CGPoint(x: 177.9, y: 80.5), controlPoint2: CGPoint(x: 177.1, y: 79.1))
        bezier3Path.addCurve(to: CGPoint(x: 172.8, y: 80.3), controlPoint1: CGPoint(x: 174.3, y: 79.1), controlPoint2: CGPoint(x: 173.4, y: 79.5))
        bezier3Path.addCurve(to: CGPoint(x: 169.3, y: 87.9), controlPoint1: CGPoint(x: 171.8, y: 81.7), controlPoint2: CGPoint(x: 169.3, y: 85.2))
        bezier3Path.addCurve(to: CGPoint(x: 175.1, y: 94), controlPoint1: CGPoint(x: 169.3, y: 91.7), controlPoint2: CGPoint(x: 172.3, y: 94))
        bezier3Path.addLine(to: CGPoint(x: 175.1, y: 94))
        bezier3Path.addCurve(to: CGPoint(x: 180.9, y: 87.9), controlPoint1: CGPoint(x: 178, y: 94), controlPoint2: CGPoint(x: 180.9, y: 91.7))
        bezier3Path.addCurve(to: CGPoint(x: 179.2, y: 82.7), controlPoint1: CGPoint(x: 181, y: 86.5), controlPoint2: CGPoint(x: 180.4, y: 84.8))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()




        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = humidityDisplayText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        humidityDisplayText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()


        //// Group 3
        //// Polygon Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -(humidityDisplayAngle - 80.8057345906) * CGFloat.pi/180)

        let polygonPath = UIBezierPath()
        polygonPath.move(to: CGPoint(x: -0, y: -98.22))
        polygonPath.addLine(to: CGPoint(x: 11.26, y: 49.11))
        polygonPath.addLine(to: CGPoint(x: -11.26, y: 49.11))
        polygonPath.close()
        indicatorColor.setFill()
        polygonPath.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawClock(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), resizing: ResizingBehavior = .aspectFit, hours: CGFloat = 5, minutes: CGFloat = 12, isSunset: Bool = true, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 320, height: 320), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 320, y: resizedFrame.height / 320)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let darkTextColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let mediumTextColor1 = UIColor(red: 0.465, green: 0.510, blue: 0.514, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereCenterColor1 = UIColor(red: 0.782, green: 0.716, blue: 0.527, alpha: 1.000)
        let darkTextColor2 = UIColor(red: 0.922, green: 0.754, blue: 0.000, alpha: 1.000)
        let mediumTextColor2 = UIColor(red: 0.843, green: 0.843, blue: 0.843, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)
        let sphereCenterColor2 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)

        //// Variable Declarations
        let clockInfoText = hours > 12 ? "PM" : "AM"
        let minuteAngle: CGFloat = -(minutes / 60.0 * 360)
        let hourAngle: CGFloat = -hours / 12.0 * 360 + minuteAngle / 12.0
        let isSunrise = !isSunset
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let darkTextColor = dayTheme ? darkTextColor1 : darkTextColor2
        let mediumTextColor = dayTheme ? mediumTextColor1 : mediumTextColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2
        let sphereCenterColor = dayTheme ? sphereCenterColor1 : sphereCenterColor2

        //// Oval Drawing
        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 10, y: 10, width: 300, height: 300))
        sphereBackgroundColor.setFill()
        ovalPath.fill()
        sphereColor.setStroke()
        ovalPath.lineWidth = 8
        ovalPath.stroke()


        //// Group
        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 157, y: 10, width: 6, height: 300))
        sphereColor.setFill()
        rectanglePath.fill()


        //// Rectangle 2 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -90 * CGFloat.pi/180)

        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle2Path.fill()

        context.restoreGState()


        //// Rectangle 3 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: -30 * CGFloat.pi/180)

        let rectangle3Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle3Path.fill()

        context.restoreGState()


        //// Rectangle 4 Drawing
        context.saveGState()
        context.translateBy(x: 160, y: 160)
        context.rotate(by: 60 * CGFloat.pi/180)

        let rectangle4Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle4Path.fill()

        context.restoreGState()


        //// Rectangle 8 Drawing
        context.saveGState()
        context.translateBy(x: 159.6, y: 159.6)
        context.rotate(by: 30 * CGFloat.pi/180)

        let rectangle8Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle8Path.fill()

        context.restoreGState()


        //// Rectangle 5 Drawing
        context.saveGState()
        context.translateBy(x: 159.6, y: 159.6)
        context.rotate(by: -60 * CGFloat.pi/180)

        let rectangle5Path = UIBezierPath(roundedRect: CGRect(x: -3, y: -150, width: 6, height: 300), cornerRadius: 3)
        sphereColor.setFill()
        rectangle5Path.fill()

        context.restoreGState()




        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 20, y: 20, width: 280, height: 280))
        sphereBackgroundColor.setFill()
        oval2Path.fill()


        //// Group 2
        //// Text Drawing
        let textRect = CGRect(x: 140, y: 20, width: 40, height: 48)
        let textTextContent = "12"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 140, y: 252, width: 40, height: 48)
        let text2TextContent = "6"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()


        //// Text 3 Drawing
        let text3Rect = CGRect(x: 20, y: 136, width: 40, height: 48)
        let text3TextContent = "9"
        let text3Style = NSMutableParagraphStyle()
        text3Style.alignment = .center
        let text3FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text3Style,
        ] as [NSAttributedStringKey: Any]

        let text3TextHeight: CGFloat = text3TextContent.boundingRect(with: CGSize(width: text3Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text3FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text3Rect)
        text3TextContent.draw(in: CGRect(x: text3Rect.minX, y: text3Rect.minY + (text3Rect.height - text3TextHeight) / 2, width: text3Rect.width, height: text3TextHeight), withAttributes: text3FontAttributes)
        context.restoreGState()


        //// Text 4 Drawing
        let text4Rect = CGRect(x: 260, y: 136, width: 40, height: 48)
        let text4TextContent = "3"
        let text4Style = NSMutableParagraphStyle()
        text4Style.alignment = .center
        let text4FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 25)!,
            .foregroundColor: mediumTextColor,
            .paragraphStyle: text4Style,
        ] as [NSAttributedStringKey: Any]

        let text4TextHeight: CGFloat = text4TextContent.boundingRect(with: CGSize(width: text4Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text4FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text4Rect)
        text4TextContent.draw(in: CGRect(x: text4Rect.minX, y: text4Rect.minY + (text4Rect.height - text4TextHeight) / 2, width: text4Rect.width, height: text4TextHeight), withAttributes: text4FontAttributes)
        context.restoreGState()




        if (isSunset) {
            //// Sunset Drawing
            let sunsetRect = CGRect(x: 110, y: 68, width: 100, height: 100)
            context.saveGState()
            context.clip(to: sunsetRect)
            context.translateBy(x: sunsetRect.minX, y: sunsetRect.minY)

            StyleKit.drawSunsetIcon(frame: CGRect(origin: .zero, size: sunsetRect.size), resizing: .stretch, dayTheme: false)
            context.restoreGState()
        }


        if (isSunrise) {
            //// Sunrise Drawing
            let sunriseRect = CGRect(x: 110, y: 68, width: 100, height: 100)
            context.saveGState()
            context.clip(to: sunriseRect)
            context.translateBy(x: sunriseRect.minX, y: sunriseRect.minY)

            StyleKit.drawSunriseIcon(frame: CGRect(origin: .zero, size: sunriseRect.size), resizing: .stretch, dayTheme: false)
            context.restoreGState()
        }


        //// Rectangle 7 Drawing
        context.saveGState()
        context.translateBy(x: 159.7, y: 159.19)
        context.rotate(by: -minuteAngle * CGFloat.pi/180)

        let rectangle7Path = UIBezierPath(rect: CGRect(x: -2.7, y: -117.19, width: 6, height: 121))
        indicatorColor.setFill()
        rectangle7Path.fill()

        context.restoreGState()


        //// Rectangle 6 Drawing
        context.saveGState()
        context.translateBy(x: 159.4, y: 161.41)
        context.rotate(by: -hourAngle * CGFloat.pi/180)

        let rectangle6Path = UIBezierPath(rect: CGRect(x: -4.5, y: -67.79, width: 10, height: 70))
        indicatorColor.setFill()
        rectangle6Path.fill()

        context.restoreGState()


        //// Oval 3 Drawing
        let oval3Rect = CGRect(x: 144, y: 144, width: 32, height: 32)
        let oval3Path = UIBezierPath(ovalIn: oval3Rect)
        indicatorColor.setFill()
        oval3Path.fill()
        let oval3Style = NSMutableParagraphStyle()
        oval3Style.alignment = .center
        let oval3FontAttributes = [
            .font: UIFont(name: "HelveticaNeue", size: 12)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: oval3Style,
        ] as [NSAttributedStringKey: Any]

        "\n".draw(in: oval3Rect, withAttributes: oval3FontAttributes)


        //// Oval 4 Drawing
        let oval4Path = UIBezierPath(ovalIn: CGRect(x: 152, y: 152, width: 16, height: 16))
        sphereCenterColor.setFill()
        oval4Path.fill()


        //// Text 5 Drawing
        let text5Rect = CGRect(x: 0, y: 220, width: 320, height: 32)
        let text5Style = NSMutableParagraphStyle()
        text5Style.alignment = .center
        let text5FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: 24)!,
            .foregroundColor: darkTextColor,
            .paragraphStyle: text5Style,
        ] as [NSAttributedStringKey: Any]

        let text5TextHeight: CGFloat = clockInfoText.boundingRect(with: CGSize(width: text5Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text5FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text5Rect)
        clockInfoText.draw(in: CGRect(x: text5Rect.minX, y: text5Rect.minY + (text5Rect.height - text5TextHeight) / 2, width: text5Rect.width, height: text5TextHeight), withAttributes: text5FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCanvas2(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 1767, height: 905), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 1767, height: 905), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 1767, y: resizedFrame.height / 905)


        //// Symbol Drawing
        let symbolRect = CGRect(x: 115, y: 230, width: 480, height: 480)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawHumidityDisplay(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch, humidity: 0.298, dayTheme: true)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 734, y: 203, width: 300, height: 669)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        StyleKit.drawTermometer(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch, termometerDegrees: 20, dayTheme: true)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 1171, y: 230, width: 480, height: 480)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        StyleKit.drawCompassDisplay(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch, compassAngle: 0, compassVelocityText: "8 mph", dayTheme: false)
        context.restoreGState()


        //// Text Drawing
        let textRect = CGRect(x: 0, y: 24, width: 1767, height: 179)
        let textTextContent = "Electronic Weather Station"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "TimesNewRomanPSMT", size: 44)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawHumidityIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Group 2
        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 53.4, y: 50.2))
        bezierPath.addCurve(to: CGPoint(x: 51, y: 51.4), controlPoint1: CGPoint(x: 52.5, y: 50.2), controlPoint2: CGPoint(x: 51.6, y: 50.6))
        bezierPath.addCurve(to: CGPoint(x: 43.6, y: 67.1), controlPoint1: CGPoint(x: 49.8, y: 53), controlPoint2: CGPoint(x: 43.6, y: 61.5))
        bezierPath.addCurve(to: CGPoint(x: 53.4, y: 77.6), controlPoint1: CGPoint(x: 43.6, y: 73.7), controlPoint2: CGPoint(x: 48.6, y: 77.6))
        bezierPath.addLine(to: CGPoint(x: 53.4, y: 77.6))
        bezierPath.addCurve(to: CGPoint(x: 63.2, y: 67.1), controlPoint1: CGPoint(x: 58.2, y: 77.6), controlPoint2: CGPoint(x: 63.2, y: 73.7))
        bezierPath.addCurve(to: CGPoint(x: 59.4, y: 56.8), controlPoint1: CGPoint(x: 63.2, y: 64.5), controlPoint2: CGPoint(x: 61.9, y: 61.1))
        bezierPath.addCurve(to: CGPoint(x: 53.4, y: 50.2), controlPoint1: CGPoint(x: 56.7, y: 52.1), controlPoint2: CGPoint(x: 55.5, y: 50.2))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 39, y: 30.2))
        bezier2Path.addCurve(to: CGPoint(x: 36.6, y: 29), controlPoint1: CGPoint(x: 38.4, y: 29.5), controlPoint2: CGPoint(x: 37.5, y: 29))
        bezier2Path.addCurve(to: CGPoint(x: 34.2, y: 30.2), controlPoint1: CGPoint(x: 35.7, y: 29), controlPoint2: CGPoint(x: 34.8, y: 29.4))
        bezier2Path.addCurve(to: CGPoint(x: 29, y: 41.3), controlPoint1: CGPoint(x: 33, y: 31.8), controlPoint2: CGPoint(x: 29, y: 37.3))
        bezier2Path.addCurve(to: CGPoint(x: 36.6, y: 49.3), controlPoint1: CGPoint(x: 29, y: 46.3), controlPoint2: CGPoint(x: 32.8, y: 49.3))
        bezier2Path.addCurve(to: CGPoint(x: 44.2, y: 41.3), controlPoint1: CGPoint(x: 40.4, y: 49.3), controlPoint2: CGPoint(x: 44.2, y: 46.3))
        bezier2Path.addCurve(to: CGPoint(x: 39, y: 30.2), controlPoint1: CGPoint(x: 44.2, y: 37.3), controlPoint2: CGPoint(x: 40.2, y: 31.8))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 68.2, y: 24.7))
        bezier3Path.addCurve(to: CGPoint(x: 64.2, y: 21.1), controlPoint1: CGPoint(x: 66.9, y: 22.5), controlPoint2: CGPoint(x: 66.1, y: 21.1))
        bezier3Path.addCurve(to: CGPoint(x: 61.8, y: 22.3), controlPoint1: CGPoint(x: 63.3, y: 21.1), controlPoint2: CGPoint(x: 62.4, y: 21.5))
        bezier3Path.addCurve(to: CGPoint(x: 58.3, y: 29.9), controlPoint1: CGPoint(x: 60.8, y: 23.7), controlPoint2: CGPoint(x: 58.3, y: 27.2))
        bezier3Path.addCurve(to: CGPoint(x: 64.1, y: 36), controlPoint1: CGPoint(x: 58.3, y: 33.7), controlPoint2: CGPoint(x: 61.3, y: 36))
        bezier3Path.addLine(to: CGPoint(x: 64.1, y: 36))
        bezier3Path.addCurve(to: CGPoint(x: 69.9, y: 29.9), controlPoint1: CGPoint(x: 67, y: 36), controlPoint2: CGPoint(x: 69.9, y: 33.7))
        bezier3Path.addCurve(to: CGPoint(x: 68.2, y: 24.7), controlPoint1: CGPoint(x: 70, y: 28.5), controlPoint2: CGPoint(x: 69.4, y: 26.8))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawWindIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 78.2, y: 23.2))
        bezierPath.addCurve(to: CGPoint(x: 69.2, y: 27.1), controlPoint1: CGPoint(x: 74.8, y: 23.2), controlPoint2: CGPoint(x: 71.5, y: 24.6))
        bezierPath.addCurve(to: CGPoint(x: 69.4, y: 32.8), controlPoint1: CGPoint(x: 67.7, y: 28.7), controlPoint2: CGPoint(x: 67.8, y: 31.2))
        bezierPath.addCurve(to: CGPoint(x: 75.1, y: 32.6), controlPoint1: CGPoint(x: 71, y: 34.3), controlPoint2: CGPoint(x: 73.5, y: 34.2))
        bezierPath.addCurve(to: CGPoint(x: 78.2, y: 31.2), controlPoint1: CGPoint(x: 75.9, y: 31.7), controlPoint2: CGPoint(x: 77, y: 31.2))
        bezierPath.addCurve(to: CGPoint(x: 82.5, y: 35.5), controlPoint1: CGPoint(x: 80.6, y: 31.2), controlPoint2: CGPoint(x: 82.5, y: 33.1))
        bezierPath.addCurve(to: CGPoint(x: 78.2, y: 39.8), controlPoint1: CGPoint(x: 82.5, y: 37.9), controlPoint2: CGPoint(x: 80.6, y: 39.8))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 39.8))
        bezierPath.addCurve(to: CGPoint(x: 10.5, y: 43.8), controlPoint1: CGPoint(x: 12.3, y: 39.8), controlPoint2: CGPoint(x: 10.5, y: 41.6))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 47.8), controlPoint1: CGPoint(x: 10.5, y: 46), controlPoint2: CGPoint(x: 12.3, y: 47.8))
        bezierPath.addLine(to: CGPoint(x: 78.2, y: 47.8))
        bezierPath.addCurve(to: CGPoint(x: 90.5, y: 35.5), controlPoint1: CGPoint(x: 85, y: 47.8), controlPoint2: CGPoint(x: 90.5, y: 42.3))
        bezierPath.addCurve(to: CGPoint(x: 78.2, y: 23.2), controlPoint1: CGPoint(x: 90.5, y: 28.7), controlPoint2: CGPoint(x: 85, y: 23.2))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 60, y: 53.2))
        bezier2Path.addLine(to: CGPoint(x: 14.5, y: 53.2))
        bezier2Path.addCurve(to: CGPoint(x: 10.5, y: 57.2), controlPoint1: CGPoint(x: 12.3, y: 53.2), controlPoint2: CGPoint(x: 10.5, y: 55))
        bezier2Path.addCurve(to: CGPoint(x: 14.5, y: 61.2), controlPoint1: CGPoint(x: 10.5, y: 59.4), controlPoint2: CGPoint(x: 12.3, y: 61.2))
        bezier2Path.addLine(to: CGPoint(x: 60, y: 61.2))
        bezier2Path.addCurve(to: CGPoint(x: 64.3, y: 65.5), controlPoint1: CGPoint(x: 62.4, y: 61.2), controlPoint2: CGPoint(x: 64.3, y: 63.1))
        bezier2Path.addCurve(to: CGPoint(x: 60, y: 69.8), controlPoint1: CGPoint(x: 64.3, y: 67.9), controlPoint2: CGPoint(x: 62.4, y: 69.8))
        bezier2Path.addCurve(to: CGPoint(x: 56.9, y: 68.4), controlPoint1: CGPoint(x: 58.8, y: 69.8), controlPoint2: CGPoint(x: 57.7, y: 69.3))
        bezier2Path.addCurve(to: CGPoint(x: 51.2, y: 68.2), controlPoint1: CGPoint(x: 55.4, y: 66.8), controlPoint2: CGPoint(x: 52.9, y: 66.7))
        bezier2Path.addCurve(to: CGPoint(x: 51, y: 73.9), controlPoint1: CGPoint(x: 49.6, y: 69.7), controlPoint2: CGPoint(x: 49.5, y: 72.2))
        bezier2Path.addCurve(to: CGPoint(x: 60, y: 77.8), controlPoint1: CGPoint(x: 53.3, y: 76.4), controlPoint2: CGPoint(x: 56.6, y: 77.8))
        bezier2Path.addCurve(to: CGPoint(x: 72.3, y: 65.5), controlPoint1: CGPoint(x: 66.8, y: 77.8), controlPoint2: CGPoint(x: 72.3, y: 72.3))
        bezier2Path.addCurve(to: CGPoint(x: 60, y: 53.2), controlPoint1: CGPoint(x: 72.2, y: 58.7), controlPoint2: CGPoint(x: 66.7, y: 53.2))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSunsetIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 44.5, y: 5.2, width: 8, height: 16.1), cornerRadius: 4)
        iconColor.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 77.8, y: 50.6))
        bezierPath.addCurve(to: CGPoint(x: 81.8, y: 54.6), controlPoint1: CGPoint(x: 77.8, y: 52.8), controlPoint2: CGPoint(x: 79.6, y: 54.6))
        bezierPath.addLine(to: CGPoint(x: 89.9, y: 54.6))
        bezierPath.addCurve(to: CGPoint(x: 93.9, y: 50.6), controlPoint1: CGPoint(x: 92.1, y: 54.6), controlPoint2: CGPoint(x: 93.9, y: 52.8))
        bezierPath.addCurve(to: CGPoint(x: 89.9, y: 46.6), controlPoint1: CGPoint(x: 93.9, y: 48.4), controlPoint2: CGPoint(x: 92.1, y: 46.6))
        bezierPath.addLine(to: CGPoint(x: 81.8, y: 46.6))
        bezierPath.addCurve(to: CGPoint(x: 77.8, y: 50.6), controlPoint1: CGPoint(x: 79.5, y: 46.6), controlPoint2: CGPoint(x: 77.8, y: 48.4))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 3.1, y: 46.6, width: 16.1, height: 8), cornerRadius: 4)
        iconColor.setFill()
        rectangle2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 72, y: 31.1))
        bezier2Path.addCurve(to: CGPoint(x: 74.8, y: 29.9), controlPoint1: CGPoint(x: 73, y: 31.1), controlPoint2: CGPoint(x: 74, y: 30.7))
        bezier2Path.addLine(to: CGPoint(x: 80.6, y: 24.1))
        bezier2Path.addCurve(to: CGPoint(x: 80.6, y: 18.4), controlPoint1: CGPoint(x: 82.2, y: 22.5), controlPoint2: CGPoint(x: 82.2, y: 20))
        bezier2Path.addCurve(to: CGPoint(x: 74.9, y: 18.4), controlPoint1: CGPoint(x: 79, y: 16.8), controlPoint2: CGPoint(x: 76.5, y: 16.8))
        bezier2Path.addLine(to: CGPoint(x: 69.1, y: 24.2))
        bezier2Path.addCurve(to: CGPoint(x: 69.1, y: 29.9), controlPoint1: CGPoint(x: 67.5, y: 25.8), controlPoint2: CGPoint(x: 67.5, y: 28.3))
        bezier2Path.addCurve(to: CGPoint(x: 72, y: 31.1), controlPoint1: CGPoint(x: 70, y: 30.7), controlPoint2: CGPoint(x: 71, y: 31.1))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 22.2, y: 29.9))
        bezier3Path.addCurve(to: CGPoint(x: 25, y: 31.1), controlPoint1: CGPoint(x: 23, y: 30.7), controlPoint2: CGPoint(x: 24, y: 31.1))
        bezier3Path.addCurve(to: CGPoint(x: 27.8, y: 29.9), controlPoint1: CGPoint(x: 26, y: 31.1), controlPoint2: CGPoint(x: 27, y: 30.7))
        bezier3Path.addCurve(to: CGPoint(x: 27.8, y: 24.2), controlPoint1: CGPoint(x: 29.4, y: 28.3), controlPoint2: CGPoint(x: 29.4, y: 25.8))
        bezier3Path.addLine(to: CGPoint(x: 22, y: 18.4))
        bezier3Path.addCurve(to: CGPoint(x: 16.3, y: 18.4), controlPoint1: CGPoint(x: 20.4, y: 16.8), controlPoint2: CGPoint(x: 17.9, y: 16.8))
        bezier3Path.addCurve(to: CGPoint(x: 16.3, y: 24.1), controlPoint1: CGPoint(x: 14.7, y: 20), controlPoint2: CGPoint(x: 14.7, y: 22.5))
        bezier3Path.addLine(to: CGPoint(x: 22.2, y: 29.9))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 28.5, y: 59.7))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 61.7), controlPoint1: CGPoint(x: 29.4, y: 61.7), controlPoint2: CGPoint(x: 31.8, y: 62.6))
        bezier4Path.addCurve(to: CGPoint(x: 35.8, y: 56.4), controlPoint1: CGPoint(x: 35.8, y: 60.8), controlPoint2: CGPoint(x: 36.7, y: 58.4))
        bezier4Path.addCurve(to: CGPoint(x: 34.5, y: 50.6), controlPoint1: CGPoint(x: 35, y: 54.6), controlPoint2: CGPoint(x: 34.5, y: 52.6))
        bezier4Path.addCurve(to: CGPoint(x: 48.5, y: 36.6), controlPoint1: CGPoint(x: 34.5, y: 42.9), controlPoint2: CGPoint(x: 40.8, y: 36.6))
        bezier4Path.addCurve(to: CGPoint(x: 62.5, y: 50.6), controlPoint1: CGPoint(x: 56.2, y: 36.6), controlPoint2: CGPoint(x: 62.5, y: 42.9))
        bezier4Path.addCurve(to: CGPoint(x: 61.2, y: 56.4), controlPoint1: CGPoint(x: 62.5, y: 52.6), controlPoint2: CGPoint(x: 62.1, y: 54.6))
        bezier4Path.addCurve(to: CGPoint(x: 63.2, y: 61.7), controlPoint1: CGPoint(x: 60.3, y: 58.4), controlPoint2: CGPoint(x: 61.2, y: 60.8))
        bezier4Path.addCurve(to: CGPoint(x: 64.9, y: 62.1), controlPoint1: CGPoint(x: 63.7, y: 61.9), controlPoint2: CGPoint(x: 64.3, y: 62.1))
        bezier4Path.addCurve(to: CGPoint(x: 68.5, y: 59.8), controlPoint1: CGPoint(x: 66.4, y: 62.1), controlPoint2: CGPoint(x: 67.9, y: 61.2))
        bezier4Path.addCurve(to: CGPoint(x: 70.5, y: 50.7), controlPoint1: CGPoint(x: 69.8, y: 56.9), controlPoint2: CGPoint(x: 70.5, y: 53.8))
        bezier4Path.addCurve(to: CGPoint(x: 48.5, y: 28.7), controlPoint1: CGPoint(x: 70.5, y: 38.6), controlPoint2: CGPoint(x: 60.6, y: 28.7))
        bezier4Path.addCurve(to: CGPoint(x: 26.5, y: 50.7), controlPoint1: CGPoint(x: 36.4, y: 28.7), controlPoint2: CGPoint(x: 26.5, y: 38.6))
        bezier4Path.addCurve(to: CGPoint(x: 28.5, y: 59.7), controlPoint1: CGPoint(x: 26.5, y: 53.8), controlPoint2: CGPoint(x: 27.2, y: 56.8))
        bezier4Path.close()
        iconColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 89.9, y: 67.8))
        bezier5Path.addLine(to: CGPoint(x: 7.1, y: 67.8))
        bezier5Path.addCurve(to: CGPoint(x: 3.1, y: 71.8), controlPoint1: CGPoint(x: 4.9, y: 67.8), controlPoint2: CGPoint(x: 3.1, y: 69.6))
        bezier5Path.addCurve(to: CGPoint(x: 7.1, y: 75.8), controlPoint1: CGPoint(x: 3.1, y: 74), controlPoint2: CGPoint(x: 4.9, y: 75.8))
        bezier5Path.addLine(to: CGPoint(x: 89.9, y: 75.8))
        bezier5Path.addCurve(to: CGPoint(x: 93.9, y: 71.8), controlPoint1: CGPoint(x: 92.1, y: 75.8), controlPoint2: CGPoint(x: 93.9, y: 74))
        bezier5Path.addCurve(to: CGPoint(x: 89.9, y: 67.8), controlPoint1: CGPoint(x: 93.9, y: 69.6), controlPoint2: CGPoint(x: 92.1, y: 67.8))
        bezier5Path.close()
        iconColor.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        context.saveGState()
        context.translateBy(x: 48.5, y: 48.69)
        context.rotate(by: -180 * CGFloat.pi/180)

        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: -2.1, y: -5.19))
        bezier6Path.addLine(to: CGPoint(x: -8.2, y: 0.91))
        bezier6Path.addCurve(to: CGPoint(x: -8.2, y: 5.11), controlPoint1: CGPoint(x: -9.4, y: 2.11), controlPoint2: CGPoint(x: -9.4, y: 4.01))
        bezier6Path.addCurve(to: CGPoint(x: -4, y: 5.11), controlPoint1: CGPoint(x: -7, y: 6.31), controlPoint2: CGPoint(x: -5.1, y: 6.31))
        bezier6Path.addLine(to: CGPoint(x: -0, y: 1.11))
        bezier6Path.addLine(to: CGPoint(x: 4, y: 5.11))
        bezier6Path.addCurve(to: CGPoint(x: 6.1, y: 6.01), controlPoint1: CGPoint(x: 4.6, y: 5.71), controlPoint2: CGPoint(x: 5.4, y: 6.01))
        bezier6Path.addCurve(to: CGPoint(x: 8.2, y: 5.11), controlPoint1: CGPoint(x: 6.9, y: 6.01), controlPoint2: CGPoint(x: 7.6, y: 5.71))
        bezier6Path.addCurve(to: CGPoint(x: 8.2, y: 0.91), controlPoint1: CGPoint(x: 9.4, y: 3.91), controlPoint2: CGPoint(x: 9.4, y: 2.01))
        bezier6Path.addLine(to: CGPoint(x: 2.1, y: -5.19))
        bezier6Path.addCurve(to: CGPoint(x: -2.1, y: -5.19), controlPoint1: CGPoint(x: 0.9, y: -6.29), controlPoint2: CGPoint(x: -0.9, y: -6.29))
        bezier6Path.close()
        iconColor.setFill()
        bezier6Path.fill()

        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSunriseIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 44.5, y: 5.2, width: 8, height: 16.1), cornerRadius: 4)
        iconColor.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 77.8, y: 50.6))
        bezierPath.addCurve(to: CGPoint(x: 81.8, y: 54.6), controlPoint1: CGPoint(x: 77.8, y: 52.8), controlPoint2: CGPoint(x: 79.6, y: 54.6))
        bezierPath.addLine(to: CGPoint(x: 89.9, y: 54.6))
        bezierPath.addCurve(to: CGPoint(x: 93.9, y: 50.6), controlPoint1: CGPoint(x: 92.1, y: 54.6), controlPoint2: CGPoint(x: 93.9, y: 52.8))
        bezierPath.addCurve(to: CGPoint(x: 89.9, y: 46.6), controlPoint1: CGPoint(x: 93.9, y: 48.4), controlPoint2: CGPoint(x: 92.1, y: 46.6))
        bezierPath.addLine(to: CGPoint(x: 81.8, y: 46.6))
        bezierPath.addCurve(to: CGPoint(x: 77.8, y: 50.6), controlPoint1: CGPoint(x: 79.5, y: 46.6), controlPoint2: CGPoint(x: 77.8, y: 48.4))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 3.1, y: 46.6, width: 16.1, height: 8), cornerRadius: 4)
        iconColor.setFill()
        rectangle2Path.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 72, y: 31.1))
        bezier2Path.addCurve(to: CGPoint(x: 74.8, y: 29.9), controlPoint1: CGPoint(x: 73, y: 31.1), controlPoint2: CGPoint(x: 74, y: 30.7))
        bezier2Path.addLine(to: CGPoint(x: 80.6, y: 24.1))
        bezier2Path.addCurve(to: CGPoint(x: 80.6, y: 18.4), controlPoint1: CGPoint(x: 82.2, y: 22.5), controlPoint2: CGPoint(x: 82.2, y: 20))
        bezier2Path.addCurve(to: CGPoint(x: 74.9, y: 18.4), controlPoint1: CGPoint(x: 79, y: 16.8), controlPoint2: CGPoint(x: 76.5, y: 16.8))
        bezier2Path.addLine(to: CGPoint(x: 69.1, y: 24.2))
        bezier2Path.addCurve(to: CGPoint(x: 69.1, y: 29.9), controlPoint1: CGPoint(x: 67.5, y: 25.8), controlPoint2: CGPoint(x: 67.5, y: 28.3))
        bezier2Path.addCurve(to: CGPoint(x: 72, y: 31.1), controlPoint1: CGPoint(x: 70, y: 30.7), controlPoint2: CGPoint(x: 71, y: 31.1))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 22.2, y: 29.9))
        bezier3Path.addCurve(to: CGPoint(x: 25, y: 31.1), controlPoint1: CGPoint(x: 23, y: 30.7), controlPoint2: CGPoint(x: 24, y: 31.1))
        bezier3Path.addCurve(to: CGPoint(x: 27.8, y: 29.9), controlPoint1: CGPoint(x: 26, y: 31.1), controlPoint2: CGPoint(x: 27, y: 30.7))
        bezier3Path.addCurve(to: CGPoint(x: 27.8, y: 24.2), controlPoint1: CGPoint(x: 29.4, y: 28.3), controlPoint2: CGPoint(x: 29.4, y: 25.8))
        bezier3Path.addLine(to: CGPoint(x: 22, y: 18.4))
        bezier3Path.addCurve(to: CGPoint(x: 16.3, y: 18.4), controlPoint1: CGPoint(x: 20.4, y: 16.8), controlPoint2: CGPoint(x: 17.9, y: 16.8))
        bezier3Path.addCurve(to: CGPoint(x: 16.3, y: 24.1), controlPoint1: CGPoint(x: 14.7, y: 20), controlPoint2: CGPoint(x: 14.7, y: 22.5))
        bezier3Path.addLine(to: CGPoint(x: 22.2, y: 29.9))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 28.5, y: 59.7))
        bezier4Path.addCurve(to: CGPoint(x: 33.8, y: 61.7), controlPoint1: CGPoint(x: 29.4, y: 61.7), controlPoint2: CGPoint(x: 31.8, y: 62.6))
        bezier4Path.addCurve(to: CGPoint(x: 35.8, y: 56.4), controlPoint1: CGPoint(x: 35.8, y: 60.8), controlPoint2: CGPoint(x: 36.7, y: 58.4))
        bezier4Path.addCurve(to: CGPoint(x: 34.5, y: 50.6), controlPoint1: CGPoint(x: 35, y: 54.6), controlPoint2: CGPoint(x: 34.5, y: 52.6))
        bezier4Path.addCurve(to: CGPoint(x: 48.5, y: 36.6), controlPoint1: CGPoint(x: 34.5, y: 42.9), controlPoint2: CGPoint(x: 40.8, y: 36.6))
        bezier4Path.addCurve(to: CGPoint(x: 62.5, y: 50.6), controlPoint1: CGPoint(x: 56.2, y: 36.6), controlPoint2: CGPoint(x: 62.5, y: 42.9))
        bezier4Path.addCurve(to: CGPoint(x: 61.2, y: 56.4), controlPoint1: CGPoint(x: 62.5, y: 52.6), controlPoint2: CGPoint(x: 62.1, y: 54.6))
        bezier4Path.addCurve(to: CGPoint(x: 63.2, y: 61.7), controlPoint1: CGPoint(x: 60.3, y: 58.4), controlPoint2: CGPoint(x: 61.2, y: 60.8))
        bezier4Path.addCurve(to: CGPoint(x: 64.9, y: 62.1), controlPoint1: CGPoint(x: 63.7, y: 61.9), controlPoint2: CGPoint(x: 64.3, y: 62.1))
        bezier4Path.addCurve(to: CGPoint(x: 68.5, y: 59.8), controlPoint1: CGPoint(x: 66.4, y: 62.1), controlPoint2: CGPoint(x: 67.9, y: 61.2))
        bezier4Path.addCurve(to: CGPoint(x: 70.5, y: 50.7), controlPoint1: CGPoint(x: 69.8, y: 56.9), controlPoint2: CGPoint(x: 70.5, y: 53.8))
        bezier4Path.addCurve(to: CGPoint(x: 48.5, y: 28.7), controlPoint1: CGPoint(x: 70.5, y: 38.6), controlPoint2: CGPoint(x: 60.6, y: 28.7))
        bezier4Path.addCurve(to: CGPoint(x: 26.5, y: 50.7), controlPoint1: CGPoint(x: 36.4, y: 28.7), controlPoint2: CGPoint(x: 26.5, y: 38.6))
        bezier4Path.addCurve(to: CGPoint(x: 28.5, y: 59.7), controlPoint1: CGPoint(x: 26.5, y: 53.8), controlPoint2: CGPoint(x: 27.2, y: 56.8))
        bezier4Path.close()
        iconColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 89.9, y: 67.8))
        bezier5Path.addLine(to: CGPoint(x: 7.1, y: 67.8))
        bezier5Path.addCurve(to: CGPoint(x: 3.1, y: 71.8), controlPoint1: CGPoint(x: 4.9, y: 67.8), controlPoint2: CGPoint(x: 3.1, y: 69.6))
        bezier5Path.addCurve(to: CGPoint(x: 7.1, y: 75.8), controlPoint1: CGPoint(x: 3.1, y: 74), controlPoint2: CGPoint(x: 4.9, y: 75.8))
        bezier5Path.addLine(to: CGPoint(x: 89.9, y: 75.8))
        bezier5Path.addCurve(to: CGPoint(x: 93.9, y: 71.8), controlPoint1: CGPoint(x: 92.1, y: 75.8), controlPoint2: CGPoint(x: 93.9, y: 74))
        bezier5Path.addCurve(to: CGPoint(x: 89.9, y: 67.8), controlPoint1: CGPoint(x: 93.9, y: 69.6), controlPoint2: CGPoint(x: 92.1, y: 67.8))
        bezier5Path.close()
        iconColor.setFill()
        bezier5Path.fill()


        //// Bezier 6 Drawing
        let bezier6Path = UIBezierPath()
        bezier6Path.move(to: CGPoint(x: 46.4, y: 43.5))
        bezier6Path.addLine(to: CGPoint(x: 40.3, y: 49.6))
        bezier6Path.addCurve(to: CGPoint(x: 40.3, y: 53.8), controlPoint1: CGPoint(x: 39.1, y: 50.8), controlPoint2: CGPoint(x: 39.1, y: 52.7))
        bezier6Path.addCurve(to: CGPoint(x: 44.5, y: 53.8), controlPoint1: CGPoint(x: 41.5, y: 55), controlPoint2: CGPoint(x: 43.4, y: 55))
        bezier6Path.addLine(to: CGPoint(x: 48.5, y: 49.8))
        bezier6Path.addLine(to: CGPoint(x: 52.5, y: 53.8))
        bezier6Path.addCurve(to: CGPoint(x: 54.6, y: 54.7), controlPoint1: CGPoint(x: 53.1, y: 54.4), controlPoint2: CGPoint(x: 53.9, y: 54.7))
        bezier6Path.addCurve(to: CGPoint(x: 56.7, y: 53.8), controlPoint1: CGPoint(x: 55.4, y: 54.7), controlPoint2: CGPoint(x: 56.1, y: 54.4))
        bezier6Path.addCurve(to: CGPoint(x: 56.7, y: 49.6), controlPoint1: CGPoint(x: 57.9, y: 52.6), controlPoint2: CGPoint(x: 57.9, y: 50.7))
        bezier6Path.addLine(to: CGPoint(x: 50.6, y: 43.5))
        bezier6Path.addCurve(to: CGPoint(x: 46.4, y: 43.5), controlPoint1: CGPoint(x: 49.4, y: 42.4), controlPoint2: CGPoint(x: 47.6, y: 42.4))
        bezier6Path.close()
        iconColor.setFill()
        bezier6Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawDeviceFrame(frame: CGRect = CGRect(x: 0, y: 0, width: 320, height: 320), dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!

        //// Color Declarations
        let frameBackground1 = UIColor(red: 0.678, green: 0.702, blue: 0.718, alpha: 1.000)
        let frameBackground2 = UIColor(red: 0.141, green: 0.141, blue: 0.141, alpha: 1.000)
        let flatYellowDark = UIColor(red: 0.924, green: 0.623, blue: 0.000, alpha: 1.000)

        //// Shadow Declarations
        let frameShadow = NSShadow()
        frameShadow.shadowColor = StyleKit.flatBlackLight
        frameShadow.shadowOffset = CGSize(width: 0, height: 2)
        frameShadow.shadowBlurRadius = 5

        //// Variable Declarations
        let frameBackground = dayTheme ? frameBackground1 : frameBackground2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: frame.minX, y: frame.minY, width: frame.width, height: frame.height))
        frameBackground.setFill()
        rectanglePath.fill()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: frame.maxX - 23.32, y: frame.minY + 8))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 23.32, y: frame.minY + 8))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 24, y: frame.minY + 12), controlPoint1: CGPoint(x: frame.minX + 23.76, y: frame.minY + 9.25), controlPoint2: CGPoint(x: frame.minX + 24, y: frame.minY + 10.6))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 12, y: frame.minY + 24), controlPoint1: CGPoint(x: frame.minX + 24, y: frame.minY + 18.63), controlPoint2: CGPoint(x: frame.minX + 18.63, y: frame.minY + 24))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 8, y: frame.minY + 23.32), controlPoint1: CGPoint(x: frame.minX + 10.6, y: frame.minY + 24), controlPoint2: CGPoint(x: frame.minX + 9.25, y: frame.minY + 23.76))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 8, y: frame.maxY - 23.32), controlPoint1: CGPoint(x: frame.minX + 8, y: frame.minY + 82.42), controlPoint2: CGPoint(x: frame.minX + 8, y: frame.maxY - 82.42))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 12, y: frame.maxY - 24), controlPoint1: CGPoint(x: frame.minX + 9.25, y: frame.maxY - 23.76), controlPoint2: CGPoint(x: frame.minX + 10.6, y: frame.maxY - 24))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 24, y: frame.maxY - 12), controlPoint1: CGPoint(x: frame.minX + 18.63, y: frame.maxY - 24), controlPoint2: CGPoint(x: frame.minX + 24, y: frame.maxY - 18.63))
        bezierPath.addCurve(to: CGPoint(x: frame.minX + 23.32, y: frame.maxY - 8), controlPoint1: CGPoint(x: frame.minX + 24, y: frame.maxY - 10.6), controlPoint2: CGPoint(x: frame.minX + 23.76, y: frame.maxY - 9.25))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 23.32, y: frame.maxY - 8), controlPoint1: CGPoint(x: frame.minX + 75.31, y: frame.maxY - 8), controlPoint2: CGPoint(x: frame.maxX - 75.31, y: frame.maxY - 8))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 24, y: frame.maxY - 12), controlPoint1: CGPoint(x: frame.maxX - 23.76, y: frame.maxY - 9.25), controlPoint2: CGPoint(x: frame.maxX - 24, y: frame.maxY - 10.6))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 12, y: frame.maxY - 24), controlPoint1: CGPoint(x: frame.maxX - 24, y: frame.maxY - 18.63), controlPoint2: CGPoint(x: frame.maxX - 18.63, y: frame.maxY - 24))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 8, y: frame.maxY - 23.32), controlPoint1: CGPoint(x: frame.maxX - 10.6, y: frame.maxY - 24), controlPoint2: CGPoint(x: frame.maxX - 9.25, y: frame.maxY - 23.76))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 8, y: frame.minY + 23.32), controlPoint1: CGPoint(x: frame.maxX - 8, y: frame.maxY - 82.42), controlPoint2: CGPoint(x: frame.maxX - 8, y: frame.minY + 82.42))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 12, y: frame.minY + 24), controlPoint1: CGPoint(x: frame.maxX - 9.25, y: frame.minY + 23.76), controlPoint2: CGPoint(x: frame.maxX - 10.6, y: frame.minY + 24))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 24, y: frame.minY + 12), controlPoint1: CGPoint(x: frame.maxX - 18.63, y: frame.minY + 24), controlPoint2: CGPoint(x: frame.maxX - 24, y: frame.minY + 18.63))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX - 23.32, y: frame.minY + 8), controlPoint1: CGPoint(x: frame.maxX - 24, y: frame.minY + 10.6), controlPoint2: CGPoint(x: frame.maxX - 23.76, y: frame.minY + 9.25))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: frame.minX + 12, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.maxX, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.maxX, y: frame.minY + 8))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX, y: frame.minY + 12), controlPoint1: CGPoint(x: frame.maxX, y: frame.minY + 9.21), controlPoint2: CGPoint(x: frame.maxX, y: frame.minY + 10.54))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX, y: frame.maxY - 12), controlPoint1: CGPoint(x: frame.maxX, y: frame.minY + 62.5), controlPoint2: CGPoint(x: frame.maxX, y: frame.maxY - 62.5))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX, y: frame.maxY - 8), controlPoint1: CGPoint(x: frame.maxX, y: frame.maxY - 10.54), controlPoint2: CGPoint(x: frame.maxX, y: frame.maxY - 9.21))
        bezierPath.addCurve(to: CGPoint(x: frame.maxX, y: frame.maxY), controlPoint1: CGPoint(x: frame.maxX, y: frame.maxY - 2.85), controlPoint2: CGPoint(x: frame.maxX, y: frame.maxY))
        bezierPath.addLine(to: CGPoint(x: frame.minX, y: frame.maxY))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.maxY - 4.44), controlPoint1: CGPoint(x: frame.minX, y: frame.maxY), controlPoint2: CGPoint(x: frame.minX, y: frame.maxY - 1.55))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.maxY - 8), controlPoint1: CGPoint(x: frame.minX, y: frame.maxY - 5.47), controlPoint2: CGPoint(x: frame.minX, y: frame.maxY - 6.65))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.maxY - 12), controlPoint1: CGPoint(x: frame.minX, y: frame.maxY - 9.21), controlPoint2: CGPoint(x: frame.minX, y: frame.maxY - 10.54))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.minY + 12), controlPoint1: CGPoint(x: frame.minX, y: frame.maxY - 62.5), controlPoint2: CGPoint(x: frame.minX, y: frame.minY + 62.5))
        bezierPath.addCurve(to: CGPoint(x: frame.minX, y: frame.minY + 8), controlPoint1: CGPoint(x: frame.minX, y: frame.minY + 10.54), controlPoint2: CGPoint(x: frame.minX, y: frame.minY + 9.21))
        bezierPath.addLine(to: CGPoint(x: frame.minX, y: frame.minY))
        bezierPath.addLine(to: CGPoint(x: frame.minX + 12, y: frame.minY))
        bezierPath.close()
        context.saveGState()
        context.setShadow(offset: frameShadow.shadowOffset, blur: frameShadow.shadowBlurRadius, color: (frameShadow.shadowColor as! UIColor).cgColor)
        flatYellowDark.setFill()
        bezierPath.fill()
        context.restoreGState()
    }

    @objc dynamic public class func drawBaseButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 151, height: 152), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 151, height: 152), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 151, y: resizedFrame.height / 152)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)

        //// Variable Declarations
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 4, y: 4, width: 143, height: 143), cornerRadius: 8)
        sphereBackgroundColor.setFill()
        rectanglePath.fill()
        sphereColor.setStroke()
        rectanglePath.lineWidth = 8
        rectanglePath.stroke()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRefreshIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 98.3, y: 5.38))
        bezier4Path.addCurve(to: CGPoint(x: 95.38, y: 4.15), controlPoint1: CGPoint(x: 97.48, y: 4.56), controlPoint2: CGPoint(x: 96.51, y: 4.15))
        bezier4Path.addCurve(to: CGPoint(x: 92.47, y: 5.38), controlPoint1: CGPoint(x: 94.26, y: 4.15), controlPoint2: CGPoint(x: 93.29, y: 4.56))
        bezier4Path.addLine(to: CGPoint(x: 84.04, y: 13.74))
        bezier4Path.addCurve(to: CGPoint(x: 68.17, y: 3.6), controlPoint1: CGPoint(x: 79.42, y: 9.38), controlPoint2: CGPoint(x: 74.13, y: 6))
        bezier4Path.addCurve(to: CGPoint(x: 49.76, y: 0), controlPoint1: CGPoint(x: 62.21, y: 1.2), controlPoint2: CGPoint(x: 56.07, y: 0))
        bezier4Path.addCurve(to: CGPoint(x: 18.66, y: 10.79), controlPoint1: CGPoint(x: 37.88, y: 0), controlPoint2: CGPoint(x: 27.52, y: 3.6))
        bezier4Path.addCurve(to: CGPoint(x: 1.17, y: 38.94), controlPoint1: CGPoint(x: 9.81, y: 17.98), controlPoint2: CGPoint(x: 3.97, y: 27.37))
        bezier4Path.addLine(to: CGPoint(x: 1.17, y: 39.4))
        bezier4Path.addCurve(to: CGPoint(x: 1.78, y: 40.85), controlPoint1: CGPoint(x: 1.17, y: 39.96), controlPoint2: CGPoint(x: 1.37, y: 40.44))
        bezier4Path.addCurve(to: CGPoint(x: 3.24, y: 41.47), controlPoint1: CGPoint(x: 2.19, y: 41.27), controlPoint2: CGPoint(x: 2.68, y: 41.47))
        bezier4Path.addLine(to: CGPoint(x: 16.13, y: 41.47))
        bezier4Path.addCurve(to: CGPoint(x: 18.08, y: 39.98), controlPoint1: CGPoint(x: 17.08, y: 41.47), controlPoint2: CGPoint(x: 17.73, y: 40.97))
        bezier4Path.addCurve(to: CGPoint(x: 21.51, y: 32.4), controlPoint1: CGPoint(x: 19.89, y: 35.66), controlPoint2: CGPoint(x: 21.04, y: 33.13))
        bezier4Path.addCurve(to: CGPoint(x: 33.56, y: 20.8), controlPoint1: CGPoint(x: 24.54, y: 27.48), controlPoint2: CGPoint(x: 28.55, y: 23.61))
        bezier4Path.addCurve(to: CGPoint(x: 49.76, y: 16.59), controlPoint1: CGPoint(x: 38.58, y: 17.99), controlPoint2: CGPoint(x: 43.98, y: 16.59))
        bezier4Path.addCurve(to: CGPoint(x: 72.38, y: 25.47), controlPoint1: CGPoint(x: 58.45, y: 16.59), controlPoint2: CGPoint(x: 65.99, y: 19.55))
        bezier4Path.addLine(to: CGPoint(x: 63.44, y: 34.41))
        bezier4Path.addCurve(to: CGPoint(x: 62.21, y: 37.32), controlPoint1: CGPoint(x: 62.62, y: 35.23), controlPoint2: CGPoint(x: 62.21, y: 36.2))
        bezier4Path.addCurve(to: CGPoint(x: 63.44, y: 40.24), controlPoint1: CGPoint(x: 62.21, y: 38.45), controlPoint2: CGPoint(x: 62.62, y: 39.42))
        bezier4Path.addCurve(to: CGPoint(x: 66.35, y: 41.47), controlPoint1: CGPoint(x: 64.26, y: 41.06), controlPoint2: CGPoint(x: 65.23, y: 41.47))
        bezier4Path.addLine(to: CGPoint(x: 95.38, y: 41.47))
        bezier4Path.addCurve(to: CGPoint(x: 98.3, y: 40.24), controlPoint1: CGPoint(x: 96.51, y: 41.47), controlPoint2: CGPoint(x: 97.48, y: 41.06))
        bezier4Path.addCurve(to: CGPoint(x: 99.53, y: 37.32), controlPoint1: CGPoint(x: 99.12, y: 39.42), controlPoint2: CGPoint(x: 99.53, y: 38.45))
        bezier4Path.addLine(to: CGPoint(x: 99.53, y: 8.3))
        bezier4Path.addCurve(to: CGPoint(x: 98.3, y: 5.38), controlPoint1: CGPoint(x: 99.53, y: 7.17), controlPoint2: CGPoint(x: 99.12, y: 6.2))
        bezier4Path.close()
        iconColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 95.83, y: 58.06))
        bezier5Path.addLine(to: CGPoint(x: 83.39, y: 58.06))
        bezier5Path.addCurve(to: CGPoint(x: 81.45, y: 59.55), controlPoint1: CGPoint(x: 82.44, y: 58.06), controlPoint2: CGPoint(x: 81.8, y: 58.56))
        bezier5Path.addCurve(to: CGPoint(x: 78.02, y: 67.13), controlPoint1: CGPoint(x: 79.64, y: 63.87), controlPoint2: CGPoint(x: 78.49, y: 66.39))
        bezier5Path.addCurve(to: CGPoint(x: 65.96, y: 78.73), controlPoint1: CGPoint(x: 74.99, y: 72.05), controlPoint2: CGPoint(x: 70.97, y: 75.92))
        bezier5Path.addCurve(to: CGPoint(x: 49.76, y: 82.94), controlPoint1: CGPoint(x: 60.95, y: 81.54), controlPoint2: CGPoint(x: 55.55, y: 82.94))
        bezier5Path.addCurve(to: CGPoint(x: 37.65, y: 80.61), controlPoint1: CGPoint(x: 45.57, y: 82.94), controlPoint2: CGPoint(x: 41.54, y: 82.16))
        bezier5Path.addCurve(to: CGPoint(x: 27.22, y: 74), controlPoint1: CGPoint(x: 33.76, y: 79.05), controlPoint2: CGPoint(x: 30.28, y: 76.85))
        bezier5Path.addLine(to: CGPoint(x: 36.09, y: 65.12))
        bezier5Path.addCurve(to: CGPoint(x: 37.32, y: 62.2), controlPoint1: CGPoint(x: 36.91, y: 64.3), controlPoint2: CGPoint(x: 37.32, y: 63.33))
        bezier5Path.addCurve(to: CGPoint(x: 36.09, y: 59.29), controlPoint1: CGPoint(x: 37.32, y: 61.08), controlPoint2: CGPoint(x: 36.91, y: 60.11))
        bezier5Path.addCurve(to: CGPoint(x: 33.18, y: 58.06), controlPoint1: CGPoint(x: 35.27, y: 58.47), controlPoint2: CGPoint(x: 34.3, y: 58.06))
        bezier5Path.addLine(to: CGPoint(x: 4.15, y: 58.06))
        bezier5Path.addCurve(to: CGPoint(x: 1.23, y: 59.29), controlPoint1: CGPoint(x: 3.02, y: 58.06), controlPoint2: CGPoint(x: 2.05, y: 58.47))
        bezier5Path.addCurve(to: CGPoint(x: 0, y: 62.2), controlPoint1: CGPoint(x: 0.41, y: 60.11), controlPoint2: CGPoint(x: 0, y: 61.08))
        bezier5Path.addLine(to: CGPoint(x: 0, y: 91.23))
        bezier5Path.addCurve(to: CGPoint(x: 1.23, y: 94.15), controlPoint1: CGPoint(x: 0, y: 92.35), controlPoint2: CGPoint(x: 0.41, y: 93.33))
        bezier5Path.addCurve(to: CGPoint(x: 4.15, y: 95.38), controlPoint1: CGPoint(x: 2.05, y: 94.97), controlPoint2: CGPoint(x: 3.02, y: 95.38))
        bezier5Path.addCurve(to: CGPoint(x: 7.06, y: 94.15), controlPoint1: CGPoint(x: 5.27, y: 95.38), controlPoint2: CGPoint(x: 6.24, y: 94.97))
        bezier5Path.addLine(to: CGPoint(x: 15.42, y: 85.79))
        bezier5Path.addCurve(to: CGPoint(x: 31.2, y: 95.96), controlPoint1: CGPoint(x: 20.04, y: 90.19), controlPoint2: CGPoint(x: 25.3, y: 93.59))
        bezier5Path.addCurve(to: CGPoint(x: 49.51, y: 99.52), controlPoint1: CGPoint(x: 37.1, y: 98.34), controlPoint2: CGPoint(x: 43.2, y: 99.52))
        bezier5Path.addCurve(to: CGPoint(x: 80.48, y: 88.74), controlPoint1: CGPoint(x: 61.34, y: 99.52), controlPoint2: CGPoint(x: 71.67, y: 95.93))
        bezier5Path.addCurve(to: CGPoint(x: 97.85, y: 60.58), controlPoint1: CGPoint(x: 89.29, y: 81.55), controlPoint2: CGPoint(x: 95.08, y: 72.16))
        bezier5Path.addCurve(to: CGPoint(x: 97.91, y: 60.13), controlPoint1: CGPoint(x: 97.89, y: 60.5), controlPoint2: CGPoint(x: 97.91, y: 60.35))
        bezier5Path.addCurve(to: CGPoint(x: 97.29, y: 58.67), controlPoint1: CGPoint(x: 97.91, y: 59.57), controlPoint2: CGPoint(x: 97.7, y: 59.08))
        bezier5Path.addCurve(to: CGPoint(x: 95.83, y: 58.06), controlPoint1: CGPoint(x: 96.88, y: 58.26), controlPoint2: CGPoint(x: 96.4, y: 58.06))
        bezier5Path.close()
        iconColor.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawMoon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 53.96, y: 99.34))
        bezierPath.addCurve(to: CGPoint(x: 10.97, y: 74.47), controlPoint1: CGPoint(x: 36.22, y: 99.34), controlPoint2: CGPoint(x: 19.76, y: 89.71))
        bezierPath.addCurve(to: CGPoint(x: 6.01, y: 36.76), controlPoint1: CGPoint(x: 4.41, y: 62.91), controlPoint2: CGPoint(x: 2.65, y: 49.6))
        bezierPath.addCurve(to: CGPoint(x: 29.03, y: 6.59), controlPoint1: CGPoint(x: 9.37, y: 23.92), controlPoint2: CGPoint(x: 17.68, y: 13.17))
        bezierPath.addCurve(to: CGPoint(x: 50.28, y: 0.01), controlPoint1: CGPoint(x: 35.58, y: 2.74), controlPoint2: CGPoint(x: 42.77, y: 0.65))
        bezierPath.addCurve(to: CGPoint(x: 56.67, y: 3.86), controlPoint1: CGPoint(x: 53, y: -0.15), controlPoint2: CGPoint(x: 55.56, y: 1.46))
        bezierPath.addCurve(to: CGPoint(x: 55.08, y: 11.08), controlPoint1: CGPoint(x: 57.79, y: 6.43), controlPoint2: CGPoint(x: 57.15, y: 9.32))
        bezierPath.addCurve(to: CGPoint(x: 48.36, y: 52.81), controlPoint1: CGPoint(x: 43.41, y: 21.68), controlPoint2: CGPoint(x: 40.53, y: 39.17))
        bezierPath.addCurve(to: CGPoint(x: 77.29, y: 69.49), controlPoint1: CGPoint(x: 54.28, y: 63.08), controlPoint2: CGPoint(x: 65.3, y: 69.49))
        bezierPath.addCurve(to: CGPoint(x: 87.68, y: 67.89), controlPoint1: CGPoint(x: 80.81, y: 69.49), controlPoint2: CGPoint(x: 84.32, y: 68.85))
        bezierPath.addCurve(to: CGPoint(x: 94.71, y: 70.14), controlPoint1: CGPoint(x: 90.24, y: 67.09), controlPoint2: CGPoint(x: 93.11, y: 67.89))
        bezierPath.addCurve(to: CGPoint(x: 94.87, y: 77.68), controlPoint1: CGPoint(x: 96.31, y: 72.38), controlPoint2: CGPoint(x: 96.47, y: 75.27))
        bezierPath.addCurve(to: CGPoint(x: 78.57, y: 92.92), controlPoint1: CGPoint(x: 90.72, y: 83.94), controlPoint2: CGPoint(x: 85.12, y: 89.07))
        bezierPath.addCurve(to: CGPoint(x: 53.96, y: 99.34), controlPoint1: CGPoint(x: 71.06, y: 96.93), controlPoint2: CGPoint(x: 62.59, y: 99.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 34.78, y: 17.98))
        bezierPath.addCurve(to: CGPoint(x: 18.32, y: 39.97), controlPoint1: CGPoint(x: 26.63, y: 22.96), controlPoint2: CGPoint(x: 20.87, y: 30.66))
        bezierPath.addCurve(to: CGPoint(x: 21.99, y: 68.05), controlPoint1: CGPoint(x: 15.76, y: 49.44), controlPoint2: CGPoint(x: 17.04, y: 59.38))
        bezierPath.addCurve(to: CGPoint(x: 53.8, y: 86.5), controlPoint1: CGPoint(x: 28.55, y: 79.44), controlPoint2: CGPoint(x: 40.69, y: 86.5))
        bezierPath.addCurve(to: CGPoint(x: 71.38, y: 82.01), controlPoint1: CGPoint(x: 59.87, y: 86.5), controlPoint2: CGPoint(x: 65.94, y: 84.9))
        bezierPath.addCurve(to: CGPoint(x: 37.02, y: 59.22), controlPoint1: CGPoint(x: 57.15, y: 80.25), controlPoint2: CGPoint(x: 44.37, y: 71.9))
        bezierPath.addCurve(to: CGPoint(x: 34.78, y: 17.98), controlPoint1: CGPoint(x: 29.82, y: 46.39), controlPoint2: CGPoint(x: 29.19, y: 31.14))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawSmileIcon(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 100, height: 100), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 100, height: 100), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 100, y: resizedFrame.height / 100)


        //// Color Declarations
        let iconColor1 = UIColor(red: 0.697, green: 0.721, blue: 0.734, alpha: 1.000)
        let iconColor2 = UIColor(red: 0.220, green: 0.548, blue: 0.818, alpha: 1.000)

        //// Variable Declarations
        let iconColor = dayTheme ? iconColor1 : iconColor2

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 92.86, y: 24.79))
        bezierPath.addCurve(to: CGPoint(x: 74.75, y: 6.68), controlPoint1: CGPoint(x: 88.41, y: 17.16), controlPoint2: CGPoint(x: 82.37, y: 11.13))
        bezierPath.addCurve(to: CGPoint(x: 49.77, y: 0), controlPoint1: CGPoint(x: 67.12, y: 2.23), controlPoint2: CGPoint(x: 58.8, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 24.79, y: 6.68), controlPoint1: CGPoint(x: 40.74, y: 0), controlPoint2: CGPoint(x: 32.41, y: 2.23))
        bezierPath.addCurve(to: CGPoint(x: 6.68, y: 24.79), controlPoint1: CGPoint(x: 17.16, y: 11.13), controlPoint2: CGPoint(x: 11.13, y: 17.16))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 49.77), controlPoint1: CGPoint(x: 2.22, y: 32.41), controlPoint2: CGPoint(x: 0, y: 40.74))
        bezierPath.addCurve(to: CGPoint(x: 6.67, y: 74.75), controlPoint1: CGPoint(x: 0, y: 58.8), controlPoint2: CGPoint(x: 2.23, y: 67.12))
        bezierPath.addCurve(to: CGPoint(x: 24.79, y: 92.86), controlPoint1: CGPoint(x: 11.12, y: 82.37), controlPoint2: CGPoint(x: 17.16, y: 88.41))
        bezierPath.addCurve(to: CGPoint(x: 49.77, y: 99.53), controlPoint1: CGPoint(x: 32.41, y: 97.31), controlPoint2: CGPoint(x: 40.74, y: 99.53))
        bezierPath.addCurve(to: CGPoint(x: 74.75, y: 92.86), controlPoint1: CGPoint(x: 58.8, y: 99.53), controlPoint2: CGPoint(x: 67.12, y: 97.31))
        bezierPath.addCurve(to: CGPoint(x: 92.86, y: 74.75), controlPoint1: CGPoint(x: 82.37, y: 88.41), controlPoint2: CGPoint(x: 88.41, y: 82.37))
        bezierPath.addCurve(to: CGPoint(x: 99.53, y: 49.77), controlPoint1: CGPoint(x: 97.31, y: 67.12), controlPoint2: CGPoint(x: 99.53, y: 58.8))
        bezierPath.addCurve(to: CGPoint(x: 92.86, y: 24.79), controlPoint1: CGPoint(x: 99.53, y: 40.74), controlPoint2: CGPoint(x: 97.31, y: 32.41))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 87.93, y: 65.87))
        bezierPath.addCurve(to: CGPoint(x: 79.09, y: 79.09), controlPoint1: CGPoint(x: 85.73, y: 70.99), controlPoint2: CGPoint(x: 82.78, y: 75.4))
        bezierPath.addCurve(to: CGPoint(x: 65.87, y: 87.93), controlPoint1: CGPoint(x: 75.4, y: 82.78), controlPoint2: CGPoint(x: 70.99, y: 85.73))
        bezierPath.addCurve(to: CGPoint(x: 49.77, y: 91.24), controlPoint1: CGPoint(x: 60.75, y: 90.14), controlPoint2: CGPoint(x: 55.38, y: 91.24))
        bezierPath.addCurve(to: CGPoint(x: 33.66, y: 87.93), controlPoint1: CGPoint(x: 44.15, y: 91.24), controlPoint2: CGPoint(x: 38.78, y: 90.14))
        bezierPath.addCurve(to: CGPoint(x: 20.45, y: 79.09), controlPoint1: CGPoint(x: 28.55, y: 85.73), controlPoint2: CGPoint(x: 24.14, y: 82.78))
        bezierPath.addCurve(to: CGPoint(x: 11.6, y: 65.87), controlPoint1: CGPoint(x: 16.75, y: 75.4), controlPoint2: CGPoint(x: 13.8, y: 70.99))
        bezierPath.addCurve(to: CGPoint(x: 8.3, y: 49.77), controlPoint1: CGPoint(x: 9.4, y: 60.75), controlPoint2: CGPoint(x: 8.3, y: 55.38))
        bezierPath.addCurve(to: CGPoint(x: 11.6, y: 33.66), controlPoint1: CGPoint(x: 8.3, y: 44.15), controlPoint2: CGPoint(x: 9.4, y: 38.78))
        bezierPath.addCurve(to: CGPoint(x: 20.45, y: 20.45), controlPoint1: CGPoint(x: 13.8, y: 28.55), controlPoint2: CGPoint(x: 16.75, y: 24.14))
        bezierPath.addCurve(to: CGPoint(x: 33.66, y: 11.6), controlPoint1: CGPoint(x: 24.14, y: 16.75), controlPoint2: CGPoint(x: 28.55, y: 13.8))
        bezierPath.addCurve(to: CGPoint(x: 49.77, y: 8.3), controlPoint1: CGPoint(x: 38.78, y: 9.4), controlPoint2: CGPoint(x: 44.15, y: 8.3))
        bezierPath.addCurve(to: CGPoint(x: 65.87, y: 11.6), controlPoint1: CGPoint(x: 55.38, y: 8.3), controlPoint2: CGPoint(x: 60.75, y: 9.4))
        bezierPath.addCurve(to: CGPoint(x: 79.09, y: 20.45), controlPoint1: CGPoint(x: 70.99, y: 13.8), controlPoint2: CGPoint(x: 75.4, y: 16.75))
        bezierPath.addCurve(to: CGPoint(x: 87.93, y: 33.66), controlPoint1: CGPoint(x: 82.78, y: 24.14), controlPoint2: CGPoint(x: 85.73, y: 28.55))
        bezierPath.addCurve(to: CGPoint(x: 91.24, y: 49.77), controlPoint1: CGPoint(x: 90.14, y: 38.78), controlPoint2: CGPoint(x: 91.24, y: 44.15))
        bezierPath.addCurve(to: CGPoint(x: 87.93, y: 65.87), controlPoint1: CGPoint(x: 91.24, y: 55.38), controlPoint2: CGPoint(x: 90.14, y: 60.75))
        bezierPath.close()
        iconColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 70.83, y: 56.18))
        bezier2Path.addCurve(to: CGPoint(x: 67.65, y: 56.44), controlPoint1: CGPoint(x: 69.75, y: 55.83), controlPoint2: CGPoint(x: 68.69, y: 55.92))
        bezier2Path.addCurve(to: CGPoint(x: 65.58, y: 58.9), controlPoint1: CGPoint(x: 66.61, y: 56.96), controlPoint2: CGPoint(x: 65.92, y: 57.78))
        bezier2Path.addCurve(to: CGPoint(x: 59.59, y: 67.3), controlPoint1: CGPoint(x: 64.5, y: 62.36), controlPoint2: CGPoint(x: 62.5, y: 65.16))
        bezier2Path.addCurve(to: CGPoint(x: 49.77, y: 70.5), controlPoint1: CGPoint(x: 56.67, y: 69.43), controlPoint2: CGPoint(x: 53.4, y: 70.5))
        bezier2Path.addCurve(to: CGPoint(x: 39.95, y: 67.3), controlPoint1: CGPoint(x: 46.14, y: 70.5), controlPoint2: CGPoint(x: 42.87, y: 69.43))
        bezier2Path.addCurve(to: CGPoint(x: 33.96, y: 58.9), controlPoint1: CGPoint(x: 37.04, y: 65.16), controlPoint2: CGPoint(x: 35.04, y: 62.36))
        bezier2Path.addCurve(to: CGPoint(x: 31.92, y: 56.44), controlPoint1: CGPoint(x: 33.61, y: 57.78), controlPoint2: CGPoint(x: 32.93, y: 56.96))
        bezier2Path.addCurve(to: CGPoint(x: 28.77, y: 56.18), controlPoint1: CGPoint(x: 30.9, y: 55.92), controlPoint2: CGPoint(x: 29.85, y: 55.83))
        bezier2Path.addCurve(to: CGPoint(x: 26.31, y: 58.22), controlPoint1: CGPoint(x: 27.65, y: 56.53), controlPoint2: CGPoint(x: 26.83, y: 57.21))
        bezier2Path.addCurve(to: CGPoint(x: 26.05, y: 61.36), controlPoint1: CGPoint(x: 25.79, y: 59.24), controlPoint2: CGPoint(x: 25.71, y: 60.29))
        bezier2Path.addCurve(to: CGPoint(x: 34.99, y: 74), controlPoint1: CGPoint(x: 27.65, y: 66.59), controlPoint2: CGPoint(x: 30.63, y: 70.8))
        bezier2Path.addCurve(to: CGPoint(x: 49.77, y: 78.8), controlPoint1: CGPoint(x: 39.36, y: 77.2), controlPoint2: CGPoint(x: 44.28, y: 78.8))
        bezier2Path.addCurve(to: CGPoint(x: 64.54, y: 74), controlPoint1: CGPoint(x: 55.25, y: 78.8), controlPoint2: CGPoint(x: 60.18, y: 77.2))
        bezier2Path.addCurve(to: CGPoint(x: 73.48, y: 61.36), controlPoint1: CGPoint(x: 68.9, y: 70.8), controlPoint2: CGPoint(x: 71.89, y: 66.59))
        bezier2Path.addCurve(to: CGPoint(x: 73.23, y: 58.22), controlPoint1: CGPoint(x: 73.83, y: 60.29), controlPoint2: CGPoint(x: 73.74, y: 59.24))
        bezier2Path.addCurve(to: CGPoint(x: 70.83, y: 56.18), controlPoint1: CGPoint(x: 72.71, y: 57.21), controlPoint2: CGPoint(x: 71.91, y: 56.53))
        bezier2Path.close()
        iconColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 33.18, y: 41.47))
        bezier3Path.addCurve(to: CGPoint(x: 39.04, y: 39.04), controlPoint1: CGPoint(x: 35.47, y: 41.47), controlPoint2: CGPoint(x: 37.42, y: 40.66))
        bezier3Path.addCurve(to: CGPoint(x: 41.47, y: 33.18), controlPoint1: CGPoint(x: 40.66, y: 37.42), controlPoint2: CGPoint(x: 41.47, y: 35.47))
        bezier3Path.addCurve(to: CGPoint(x: 39.04, y: 27.32), controlPoint1: CGPoint(x: 41.47, y: 30.89), controlPoint2: CGPoint(x: 40.66, y: 28.94))
        bezier3Path.addCurve(to: CGPoint(x: 33.18, y: 24.88), controlPoint1: CGPoint(x: 37.42, y: 25.7), controlPoint2: CGPoint(x: 35.47, y: 24.88))
        bezier3Path.addCurve(to: CGPoint(x: 27.31, y: 27.32), controlPoint1: CGPoint(x: 30.89, y: 24.88), controlPoint2: CGPoint(x: 28.93, y: 25.7))
        bezier3Path.addCurve(to: CGPoint(x: 24.88, y: 33.18), controlPoint1: CGPoint(x: 25.69, y: 28.94), controlPoint2: CGPoint(x: 24.88, y: 30.89))
        bezier3Path.addCurve(to: CGPoint(x: 27.31, y: 39.04), controlPoint1: CGPoint(x: 24.88, y: 35.47), controlPoint2: CGPoint(x: 25.69, y: 37.42))
        bezier3Path.addCurve(to: CGPoint(x: 33.18, y: 41.47), controlPoint1: CGPoint(x: 28.93, y: 40.66), controlPoint2: CGPoint(x: 30.89, y: 41.47))
        bezier3Path.close()
        iconColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 66.36, y: 24.88))
        bezier4Path.addCurve(to: CGPoint(x: 60.49, y: 27.31), controlPoint1: CGPoint(x: 64.07, y: 24.88), controlPoint2: CGPoint(x: 62.11, y: 25.69))
        bezier4Path.addCurve(to: CGPoint(x: 58.06, y: 33.18), controlPoint1: CGPoint(x: 58.87, y: 28.93), controlPoint2: CGPoint(x: 58.06, y: 30.89))
        bezier4Path.addCurve(to: CGPoint(x: 60.49, y: 39.04), controlPoint1: CGPoint(x: 58.06, y: 35.47), controlPoint2: CGPoint(x: 58.87, y: 37.42))
        bezier4Path.addCurve(to: CGPoint(x: 66.36, y: 41.47), controlPoint1: CGPoint(x: 62.11, y: 40.66), controlPoint2: CGPoint(x: 64.07, y: 41.47))
        bezier4Path.addCurve(to: CGPoint(x: 72.22, y: 39.04), controlPoint1: CGPoint(x: 68.64, y: 41.47), controlPoint2: CGPoint(x: 70.6, y: 40.66))
        bezier4Path.addCurve(to: CGPoint(x: 74.65, y: 33.18), controlPoint1: CGPoint(x: 73.84, y: 37.42), controlPoint2: CGPoint(x: 74.65, y: 35.47))
        bezier4Path.addCurve(to: CGPoint(x: 72.22, y: 27.31), controlPoint1: CGPoint(x: 74.65, y: 30.89), controlPoint2: CGPoint(x: 73.84, y: 28.93))
        bezier4Path.addCurve(to: CGPoint(x: 66.36, y: 24.88), controlPoint1: CGPoint(x: 70.6, y: 25.69), controlPoint2: CGPoint(x: 68.64, y: 24.88))
        bezier4Path.close()
        iconColor.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawNightModeButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 151, height: 152), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 151, height: 152), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 151, y: resizedFrame.height / 152)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)

        //// Variable Declarations
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 4, y: 4, width: 143, height: 143), cornerRadius: 8)
        sphereBackgroundColor.setFill()
        rectanglePath.fill()
        sphereColor.setStroke()
        rectanglePath.lineWidth = 8
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 83.96, y: 125.34))
        bezierPath.addCurve(to: CGPoint(x: 40.97, y: 100.47), controlPoint1: CGPoint(x: 66.22, y: 125.34), controlPoint2: CGPoint(x: 49.76, y: 115.71))
        bezierPath.addCurve(to: CGPoint(x: 36.01, y: 62.76), controlPoint1: CGPoint(x: 34.41, y: 88.91), controlPoint2: CGPoint(x: 32.65, y: 75.6))
        bezierPath.addCurve(to: CGPoint(x: 59.03, y: 32.59), controlPoint1: CGPoint(x: 39.37, y: 49.92), controlPoint2: CGPoint(x: 47.68, y: 39.17))
        bezierPath.addCurve(to: CGPoint(x: 80.28, y: 26.01), controlPoint1: CGPoint(x: 65.58, y: 28.74), controlPoint2: CGPoint(x: 72.77, y: 26.65))
        bezierPath.addCurve(to: CGPoint(x: 86.67, y: 29.86), controlPoint1: CGPoint(x: 83, y: 25.85), controlPoint2: CGPoint(x: 85.56, y: 27.46))
        bezierPath.addCurve(to: CGPoint(x: 85.08, y: 37.08), controlPoint1: CGPoint(x: 87.79, y: 32.43), controlPoint2: CGPoint(x: 87.15, y: 35.32))
        bezierPath.addCurve(to: CGPoint(x: 78.36, y: 78.81), controlPoint1: CGPoint(x: 73.41, y: 47.68), controlPoint2: CGPoint(x: 70.53, y: 65.17))
        bezierPath.addCurve(to: CGPoint(x: 107.29, y: 95.49), controlPoint1: CGPoint(x: 84.28, y: 89.08), controlPoint2: CGPoint(x: 95.3, y: 95.49))
        bezierPath.addCurve(to: CGPoint(x: 117.68, y: 93.89), controlPoint1: CGPoint(x: 110.81, y: 95.49), controlPoint2: CGPoint(x: 114.32, y: 94.85))
        bezierPath.addCurve(to: CGPoint(x: 124.71, y: 96.14), controlPoint1: CGPoint(x: 120.24, y: 93.09), controlPoint2: CGPoint(x: 123.11, y: 93.89))
        bezierPath.addCurve(to: CGPoint(x: 124.87, y: 103.68), controlPoint1: CGPoint(x: 126.31, y: 98.38), controlPoint2: CGPoint(x: 126.47, y: 101.27))
        bezierPath.addCurve(to: CGPoint(x: 108.57, y: 118.92), controlPoint1: CGPoint(x: 120.72, y: 109.94), controlPoint2: CGPoint(x: 115.12, y: 115.07))
        bezierPath.addCurve(to: CGPoint(x: 83.96, y: 125.34), controlPoint1: CGPoint(x: 101.06, y: 122.93), controlPoint2: CGPoint(x: 92.59, y: 125.34))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 64.78, y: 43.98))
        bezierPath.addCurve(to: CGPoint(x: 48.32, y: 65.97), controlPoint1: CGPoint(x: 56.63, y: 48.96), controlPoint2: CGPoint(x: 50.87, y: 56.66))
        bezierPath.addCurve(to: CGPoint(x: 51.99, y: 94.05), controlPoint1: CGPoint(x: 45.76, y: 75.44), controlPoint2: CGPoint(x: 47.04, y: 85.38))
        bezierPath.addCurve(to: CGPoint(x: 83.8, y: 112.5), controlPoint1: CGPoint(x: 58.55, y: 105.44), controlPoint2: CGPoint(x: 70.69, y: 112.5))
        bezierPath.addCurve(to: CGPoint(x: 101.38, y: 108.01), controlPoint1: CGPoint(x: 89.87, y: 112.5), controlPoint2: CGPoint(x: 95.94, y: 110.9))
        bezierPath.addCurve(to: CGPoint(x: 67.02, y: 85.22), controlPoint1: CGPoint(x: 87.15, y: 106.25), controlPoint2: CGPoint(x: 74.37, y: 97.9))
        bezierPath.addCurve(to: CGPoint(x: 64.78, y: 43.98), controlPoint1: CGPoint(x: 59.82, y: 72.39), controlPoint2: CGPoint(x: 59.19, y: 57.14))
        bezierPath.close()
        indicatorColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawRefreshButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 151, height: 152), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 151, height: 152), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 151, y: resizedFrame.height / 152)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)

        //// Variable Declarations
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 4, y: 4, width: 143, height: 143), cornerRadius: 8)
        sphereBackgroundColor.setFill()
        rectanglePath.fill()
        sphereColor.setStroke()
        rectanglePath.lineWidth = 8
        rectanglePath.stroke()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 124.3, y: 31.38))
        bezier4Path.addCurve(to: CGPoint(x: 121.38, y: 30.15), controlPoint1: CGPoint(x: 123.48, y: 30.56), controlPoint2: CGPoint(x: 122.51, y: 30.15))
        bezier4Path.addCurve(to: CGPoint(x: 118.47, y: 31.38), controlPoint1: CGPoint(x: 120.26, y: 30.15), controlPoint2: CGPoint(x: 119.29, y: 30.56))
        bezier4Path.addLine(to: CGPoint(x: 110.04, y: 39.74))
        bezier4Path.addCurve(to: CGPoint(x: 94.17, y: 29.6), controlPoint1: CGPoint(x: 105.42, y: 35.38), controlPoint2: CGPoint(x: 100.13, y: 32))
        bezier4Path.addCurve(to: CGPoint(x: 75.76, y: 26), controlPoint1: CGPoint(x: 88.21, y: 27.2), controlPoint2: CGPoint(x: 82.07, y: 26))
        bezier4Path.addCurve(to: CGPoint(x: 44.66, y: 36.79), controlPoint1: CGPoint(x: 63.88, y: 26), controlPoint2: CGPoint(x: 53.52, y: 29.6))
        bezier4Path.addCurve(to: CGPoint(x: 27.17, y: 64.94), controlPoint1: CGPoint(x: 35.81, y: 43.98), controlPoint2: CGPoint(x: 29.97, y: 53.37))
        bezier4Path.addLine(to: CGPoint(x: 27.17, y: 65.4))
        bezier4Path.addCurve(to: CGPoint(x: 27.78, y: 66.85), controlPoint1: CGPoint(x: 27.17, y: 65.96), controlPoint2: CGPoint(x: 27.37, y: 66.44))
        bezier4Path.addCurve(to: CGPoint(x: 29.24, y: 67.47), controlPoint1: CGPoint(x: 28.19, y: 67.27), controlPoint2: CGPoint(x: 28.68, y: 67.47))
        bezier4Path.addLine(to: CGPoint(x: 42.13, y: 67.47))
        bezier4Path.addCurve(to: CGPoint(x: 44.08, y: 65.98), controlPoint1: CGPoint(x: 43.08, y: 67.47), controlPoint2: CGPoint(x: 43.73, y: 66.97))
        bezier4Path.addCurve(to: CGPoint(x: 47.51, y: 58.4), controlPoint1: CGPoint(x: 45.89, y: 61.66), controlPoint2: CGPoint(x: 47.04, y: 59.13))
        bezier4Path.addCurve(to: CGPoint(x: 59.56, y: 46.8), controlPoint1: CGPoint(x: 50.54, y: 53.48), controlPoint2: CGPoint(x: 54.55, y: 49.61))
        bezier4Path.addCurve(to: CGPoint(x: 75.76, y: 42.59), controlPoint1: CGPoint(x: 64.58, y: 43.99), controlPoint2: CGPoint(x: 69.98, y: 42.59))
        bezier4Path.addCurve(to: CGPoint(x: 98.38, y: 51.47), controlPoint1: CGPoint(x: 84.45, y: 42.59), controlPoint2: CGPoint(x: 91.99, y: 45.55))
        bezier4Path.addLine(to: CGPoint(x: 89.44, y: 60.41))
        bezier4Path.addCurve(to: CGPoint(x: 88.21, y: 63.32), controlPoint1: CGPoint(x: 88.62, y: 61.23), controlPoint2: CGPoint(x: 88.21, y: 62.2))
        bezier4Path.addCurve(to: CGPoint(x: 89.44, y: 66.24), controlPoint1: CGPoint(x: 88.21, y: 64.45), controlPoint2: CGPoint(x: 88.62, y: 65.42))
        bezier4Path.addCurve(to: CGPoint(x: 92.35, y: 67.47), controlPoint1: CGPoint(x: 90.26, y: 67.06), controlPoint2: CGPoint(x: 91.23, y: 67.47))
        bezier4Path.addLine(to: CGPoint(x: 121.38, y: 67.47))
        bezier4Path.addCurve(to: CGPoint(x: 124.3, y: 66.24), controlPoint1: CGPoint(x: 122.51, y: 67.47), controlPoint2: CGPoint(x: 123.48, y: 67.06))
        bezier4Path.addCurve(to: CGPoint(x: 125.53, y: 63.32), controlPoint1: CGPoint(x: 125.12, y: 65.42), controlPoint2: CGPoint(x: 125.53, y: 64.45))
        bezier4Path.addLine(to: CGPoint(x: 125.53, y: 34.3))
        bezier4Path.addCurve(to: CGPoint(x: 124.3, y: 31.38), controlPoint1: CGPoint(x: 125.53, y: 33.17), controlPoint2: CGPoint(x: 125.12, y: 32.2))
        bezier4Path.close()
        indicatorColor.setFill()
        bezier4Path.fill()


        //// Bezier 5 Drawing
        let bezier5Path = UIBezierPath()
        bezier5Path.move(to: CGPoint(x: 121.83, y: 84.06))
        bezier5Path.addLine(to: CGPoint(x: 109.39, y: 84.06))
        bezier5Path.addCurve(to: CGPoint(x: 107.45, y: 85.55), controlPoint1: CGPoint(x: 108.44, y: 84.06), controlPoint2: CGPoint(x: 107.8, y: 84.56))
        bezier5Path.addCurve(to: CGPoint(x: 104.02, y: 93.13), controlPoint1: CGPoint(x: 105.64, y: 89.87), controlPoint2: CGPoint(x: 104.49, y: 92.39))
        bezier5Path.addCurve(to: CGPoint(x: 91.96, y: 104.73), controlPoint1: CGPoint(x: 100.99, y: 98.05), controlPoint2: CGPoint(x: 96.97, y: 101.92))
        bezier5Path.addCurve(to: CGPoint(x: 75.76, y: 108.94), controlPoint1: CGPoint(x: 86.95, y: 107.54), controlPoint2: CGPoint(x: 81.55, y: 108.94))
        bezier5Path.addCurve(to: CGPoint(x: 63.65, y: 106.61), controlPoint1: CGPoint(x: 71.57, y: 108.94), controlPoint2: CGPoint(x: 67.54, y: 108.16))
        bezier5Path.addCurve(to: CGPoint(x: 53.22, y: 100), controlPoint1: CGPoint(x: 59.76, y: 105.05), controlPoint2: CGPoint(x: 56.28, y: 102.85))
        bezier5Path.addLine(to: CGPoint(x: 62.09, y: 91.12))
        bezier5Path.addCurve(to: CGPoint(x: 63.32, y: 88.2), controlPoint1: CGPoint(x: 62.91, y: 90.3), controlPoint2: CGPoint(x: 63.32, y: 89.33))
        bezier5Path.addCurve(to: CGPoint(x: 62.09, y: 85.29), controlPoint1: CGPoint(x: 63.32, y: 87.08), controlPoint2: CGPoint(x: 62.91, y: 86.11))
        bezier5Path.addCurve(to: CGPoint(x: 59.18, y: 84.06), controlPoint1: CGPoint(x: 61.27, y: 84.47), controlPoint2: CGPoint(x: 60.3, y: 84.06))
        bezier5Path.addLine(to: CGPoint(x: 30.15, y: 84.06))
        bezier5Path.addCurve(to: CGPoint(x: 27.23, y: 85.29), controlPoint1: CGPoint(x: 29.02, y: 84.06), controlPoint2: CGPoint(x: 28.05, y: 84.47))
        bezier5Path.addCurve(to: CGPoint(x: 26, y: 88.2), controlPoint1: CGPoint(x: 26.41, y: 86.11), controlPoint2: CGPoint(x: 26, y: 87.08))
        bezier5Path.addLine(to: CGPoint(x: 26, y: 117.23))
        bezier5Path.addCurve(to: CGPoint(x: 27.23, y: 120.15), controlPoint1: CGPoint(x: 26, y: 118.35), controlPoint2: CGPoint(x: 26.41, y: 119.33))
        bezier5Path.addCurve(to: CGPoint(x: 30.15, y: 121.38), controlPoint1: CGPoint(x: 28.05, y: 120.97), controlPoint2: CGPoint(x: 29.02, y: 121.38))
        bezier5Path.addCurve(to: CGPoint(x: 33.06, y: 120.15), controlPoint1: CGPoint(x: 31.27, y: 121.38), controlPoint2: CGPoint(x: 32.24, y: 120.97))
        bezier5Path.addLine(to: CGPoint(x: 41.42, y: 111.79))
        bezier5Path.addCurve(to: CGPoint(x: 57.2, y: 121.96), controlPoint1: CGPoint(x: 46.04, y: 116.19), controlPoint2: CGPoint(x: 51.3, y: 119.59))
        bezier5Path.addCurve(to: CGPoint(x: 75.51, y: 125.52), controlPoint1: CGPoint(x: 63.1, y: 124.34), controlPoint2: CGPoint(x: 69.2, y: 125.52))
        bezier5Path.addCurve(to: CGPoint(x: 106.48, y: 114.74), controlPoint1: CGPoint(x: 87.34, y: 125.52), controlPoint2: CGPoint(x: 97.67, y: 121.93))
        bezier5Path.addCurve(to: CGPoint(x: 123.85, y: 86.58), controlPoint1: CGPoint(x: 115.29, y: 107.55), controlPoint2: CGPoint(x: 121.08, y: 98.16))
        bezier5Path.addCurve(to: CGPoint(x: 123.91, y: 86.13), controlPoint1: CGPoint(x: 123.89, y: 86.5), controlPoint2: CGPoint(x: 123.91, y: 86.35))
        bezier5Path.addCurve(to: CGPoint(x: 123.29, y: 84.67), controlPoint1: CGPoint(x: 123.91, y: 85.57), controlPoint2: CGPoint(x: 123.7, y: 85.08))
        bezier5Path.addCurve(to: CGPoint(x: 121.83, y: 84.06), controlPoint1: CGPoint(x: 122.88, y: 84.26), controlPoint2: CGPoint(x: 122.4, y: 84.06))
        bezier5Path.close()
        indicatorColor.setFill()
        bezier5Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawCreditsButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 151, height: 152), resizing: ResizingBehavior = .aspectFit, dayTheme: Bool = false) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 151, height: 152), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 151, y: resizedFrame.height / 152)


        //// Color Declarations
        let sphereColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let sphereColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let indicatorColor1 = UIColor(red: 0.157, green: 0.157, blue: 0.157, alpha: 1.000)
        let indicatorColor2 = UIColor(red: 0.858, green: 0.875, blue: 0.879, alpha: 1.000)
        let sphereBackgroundColor1 = UIColor(red: 0.854, green: 0.871, blue: 0.875, alpha: 1.000)
        let sphereBackgroundColor2 = UIColor(red: 0.161, green: 0.161, blue: 0.161, alpha: 1.000)

        //// Variable Declarations
        let sphereColor = dayTheme ? sphereColor1 : sphereColor2
        let indicatorColor = dayTheme ? indicatorColor1 : indicatorColor2
        let sphereBackgroundColor = dayTheme ? sphereBackgroundColor1 : sphereBackgroundColor2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 4, y: 4, width: 143, height: 143), cornerRadius: 8)
        sphereBackgroundColor.setFill()
        rectanglePath.fill()
        sphereColor.setStroke()
        rectanglePath.lineWidth = 8
        rectanglePath.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 118.86, y: 50.79))
        bezierPath.addCurve(to: CGPoint(x: 100.75, y: 32.68), controlPoint1: CGPoint(x: 114.41, y: 43.16), controlPoint2: CGPoint(x: 108.37, y: 37.13))
        bezierPath.addCurve(to: CGPoint(x: 75.77, y: 26), controlPoint1: CGPoint(x: 93.12, y: 28.23), controlPoint2: CGPoint(x: 84.8, y: 26))
        bezierPath.addCurve(to: CGPoint(x: 50.79, y: 32.68), controlPoint1: CGPoint(x: 66.74, y: 26), controlPoint2: CGPoint(x: 58.41, y: 28.23))
        bezierPath.addCurve(to: CGPoint(x: 32.68, y: 50.79), controlPoint1: CGPoint(x: 43.16, y: 37.13), controlPoint2: CGPoint(x: 37.13, y: 43.16))
        bezierPath.addCurve(to: CGPoint(x: 26, y: 75.77), controlPoint1: CGPoint(x: 28.22, y: 58.41), controlPoint2: CGPoint(x: 26, y: 66.74))
        bezierPath.addCurve(to: CGPoint(x: 32.67, y: 100.75), controlPoint1: CGPoint(x: 26, y: 84.8), controlPoint2: CGPoint(x: 28.23, y: 93.12))
        bezierPath.addCurve(to: CGPoint(x: 50.79, y: 118.86), controlPoint1: CGPoint(x: 37.12, y: 108.37), controlPoint2: CGPoint(x: 43.16, y: 114.41))
        bezierPath.addCurve(to: CGPoint(x: 75.77, y: 125.53), controlPoint1: CGPoint(x: 58.41, y: 123.31), controlPoint2: CGPoint(x: 66.74, y: 125.53))
        bezierPath.addCurve(to: CGPoint(x: 100.75, y: 118.86), controlPoint1: CGPoint(x: 84.8, y: 125.53), controlPoint2: CGPoint(x: 93.12, y: 123.31))
        bezierPath.addCurve(to: CGPoint(x: 118.86, y: 100.75), controlPoint1: CGPoint(x: 108.37, y: 114.41), controlPoint2: CGPoint(x: 114.41, y: 108.37))
        bezierPath.addCurve(to: CGPoint(x: 125.53, y: 75.77), controlPoint1: CGPoint(x: 123.31, y: 93.12), controlPoint2: CGPoint(x: 125.53, y: 84.8))
        bezierPath.addCurve(to: CGPoint(x: 118.86, y: 50.79), controlPoint1: CGPoint(x: 125.53, y: 66.74), controlPoint2: CGPoint(x: 123.31, y: 58.41))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 113.93, y: 91.87))
        bezierPath.addCurve(to: CGPoint(x: 105.09, y: 105.09), controlPoint1: CGPoint(x: 111.73, y: 96.99), controlPoint2: CGPoint(x: 108.78, y: 101.4))
        bezierPath.addCurve(to: CGPoint(x: 91.87, y: 113.93), controlPoint1: CGPoint(x: 101.4, y: 108.78), controlPoint2: CGPoint(x: 96.99, y: 111.73))
        bezierPath.addCurve(to: CGPoint(x: 75.77, y: 117.24), controlPoint1: CGPoint(x: 86.75, y: 116.14), controlPoint2: CGPoint(x: 81.38, y: 117.24))
        bezierPath.addCurve(to: CGPoint(x: 59.66, y: 113.93), controlPoint1: CGPoint(x: 70.15, y: 117.24), controlPoint2: CGPoint(x: 64.78, y: 116.14))
        bezierPath.addCurve(to: CGPoint(x: 46.45, y: 105.09), controlPoint1: CGPoint(x: 54.55, y: 111.73), controlPoint2: CGPoint(x: 50.14, y: 108.78))
        bezierPath.addCurve(to: CGPoint(x: 37.6, y: 91.87), controlPoint1: CGPoint(x: 42.75, y: 101.4), controlPoint2: CGPoint(x: 39.8, y: 96.99))
        bezierPath.addCurve(to: CGPoint(x: 34.3, y: 75.77), controlPoint1: CGPoint(x: 35.4, y: 86.75), controlPoint2: CGPoint(x: 34.3, y: 81.38))
        bezierPath.addCurve(to: CGPoint(x: 37.6, y: 59.66), controlPoint1: CGPoint(x: 34.3, y: 70.15), controlPoint2: CGPoint(x: 35.4, y: 64.78))
        bezierPath.addCurve(to: CGPoint(x: 46.45, y: 46.45), controlPoint1: CGPoint(x: 39.8, y: 54.55), controlPoint2: CGPoint(x: 42.75, y: 50.14))
        bezierPath.addCurve(to: CGPoint(x: 59.66, y: 37.6), controlPoint1: CGPoint(x: 50.14, y: 42.75), controlPoint2: CGPoint(x: 54.55, y: 39.8))
        bezierPath.addCurve(to: CGPoint(x: 75.77, y: 34.3), controlPoint1: CGPoint(x: 64.78, y: 35.4), controlPoint2: CGPoint(x: 70.15, y: 34.3))
        bezierPath.addCurve(to: CGPoint(x: 91.87, y: 37.6), controlPoint1: CGPoint(x: 81.38, y: 34.3), controlPoint2: CGPoint(x: 86.75, y: 35.4))
        bezierPath.addCurve(to: CGPoint(x: 105.09, y: 46.45), controlPoint1: CGPoint(x: 96.99, y: 39.8), controlPoint2: CGPoint(x: 101.4, y: 42.75))
        bezierPath.addCurve(to: CGPoint(x: 113.93, y: 59.66), controlPoint1: CGPoint(x: 108.78, y: 50.14), controlPoint2: CGPoint(x: 111.73, y: 54.55))
        bezierPath.addCurve(to: CGPoint(x: 117.24, y: 75.77), controlPoint1: CGPoint(x: 116.14, y: 64.78), controlPoint2: CGPoint(x: 117.24, y: 70.15))
        bezierPath.addCurve(to: CGPoint(x: 113.93, y: 91.87), controlPoint1: CGPoint(x: 117.24, y: 81.38), controlPoint2: CGPoint(x: 116.14, y: 86.75))
        bezierPath.close()
        indicatorColor.setFill()
        bezierPath.fill()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 96.83, y: 82.18))
        bezier2Path.addCurve(to: CGPoint(x: 93.65, y: 82.44), controlPoint1: CGPoint(x: 95.75, y: 81.83), controlPoint2: CGPoint(x: 94.69, y: 81.92))
        bezier2Path.addCurve(to: CGPoint(x: 91.58, y: 84.9), controlPoint1: CGPoint(x: 92.61, y: 82.96), controlPoint2: CGPoint(x: 91.92, y: 83.78))
        bezier2Path.addCurve(to: CGPoint(x: 85.59, y: 93.3), controlPoint1: CGPoint(x: 90.5, y: 88.36), controlPoint2: CGPoint(x: 88.5, y: 91.16))
        bezier2Path.addCurve(to: CGPoint(x: 75.77, y: 96.5), controlPoint1: CGPoint(x: 82.67, y: 95.43), controlPoint2: CGPoint(x: 79.4, y: 96.5))
        bezier2Path.addCurve(to: CGPoint(x: 65.95, y: 93.3), controlPoint1: CGPoint(x: 72.14, y: 96.5), controlPoint2: CGPoint(x: 68.87, y: 95.43))
        bezier2Path.addCurve(to: CGPoint(x: 59.96, y: 84.9), controlPoint1: CGPoint(x: 63.04, y: 91.16), controlPoint2: CGPoint(x: 61.04, y: 88.36))
        bezier2Path.addCurve(to: CGPoint(x: 57.92, y: 82.44), controlPoint1: CGPoint(x: 59.61, y: 83.78), controlPoint2: CGPoint(x: 58.93, y: 82.96))
        bezier2Path.addCurve(to: CGPoint(x: 54.77, y: 82.18), controlPoint1: CGPoint(x: 56.9, y: 81.92), controlPoint2: CGPoint(x: 55.85, y: 81.83))
        bezier2Path.addCurve(to: CGPoint(x: 52.31, y: 84.22), controlPoint1: CGPoint(x: 53.65, y: 82.53), controlPoint2: CGPoint(x: 52.83, y: 83.21))
        bezier2Path.addCurve(to: CGPoint(x: 52.05, y: 87.36), controlPoint1: CGPoint(x: 51.79, y: 85.24), controlPoint2: CGPoint(x: 51.71, y: 86.29))
        bezier2Path.addCurve(to: CGPoint(x: 60.99, y: 100), controlPoint1: CGPoint(x: 53.65, y: 92.59), controlPoint2: CGPoint(x: 56.63, y: 96.8))
        bezier2Path.addCurve(to: CGPoint(x: 75.77, y: 104.8), controlPoint1: CGPoint(x: 65.36, y: 103.2), controlPoint2: CGPoint(x: 70.28, y: 104.8))
        bezier2Path.addCurve(to: CGPoint(x: 90.54, y: 100), controlPoint1: CGPoint(x: 81.25, y: 104.8), controlPoint2: CGPoint(x: 86.18, y: 103.2))
        bezier2Path.addCurve(to: CGPoint(x: 99.48, y: 87.36), controlPoint1: CGPoint(x: 94.9, y: 96.8), controlPoint2: CGPoint(x: 97.89, y: 92.59))
        bezier2Path.addCurve(to: CGPoint(x: 99.23, y: 84.22), controlPoint1: CGPoint(x: 99.83, y: 86.29), controlPoint2: CGPoint(x: 99.74, y: 85.24))
        bezier2Path.addCurve(to: CGPoint(x: 96.83, y: 82.18), controlPoint1: CGPoint(x: 98.71, y: 83.21), controlPoint2: CGPoint(x: 97.91, y: 82.53))
        bezier2Path.close()
        indicatorColor.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 59.18, y: 67.47))
        bezier3Path.addCurve(to: CGPoint(x: 65.04, y: 65.04), controlPoint1: CGPoint(x: 61.47, y: 67.47), controlPoint2: CGPoint(x: 63.42, y: 66.66))
        bezier3Path.addCurve(to: CGPoint(x: 67.47, y: 59.18), controlPoint1: CGPoint(x: 66.66, y: 63.42), controlPoint2: CGPoint(x: 67.47, y: 61.47))
        bezier3Path.addCurve(to: CGPoint(x: 65.04, y: 53.32), controlPoint1: CGPoint(x: 67.47, y: 56.89), controlPoint2: CGPoint(x: 66.66, y: 54.94))
        bezier3Path.addCurve(to: CGPoint(x: 59.18, y: 50.88), controlPoint1: CGPoint(x: 63.42, y: 51.7), controlPoint2: CGPoint(x: 61.47, y: 50.88))
        bezier3Path.addCurve(to: CGPoint(x: 53.31, y: 53.32), controlPoint1: CGPoint(x: 56.89, y: 50.88), controlPoint2: CGPoint(x: 54.93, y: 51.7))
        bezier3Path.addCurve(to: CGPoint(x: 50.88, y: 59.18), controlPoint1: CGPoint(x: 51.69, y: 54.94), controlPoint2: CGPoint(x: 50.88, y: 56.89))
        bezier3Path.addCurve(to: CGPoint(x: 53.31, y: 65.04), controlPoint1: CGPoint(x: 50.88, y: 61.47), controlPoint2: CGPoint(x: 51.69, y: 63.42))
        bezier3Path.addCurve(to: CGPoint(x: 59.18, y: 67.47), controlPoint1: CGPoint(x: 54.93, y: 66.66), controlPoint2: CGPoint(x: 56.89, y: 67.47))
        bezier3Path.close()
        indicatorColor.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 92.36, y: 50.88))
        bezier4Path.addCurve(to: CGPoint(x: 86.49, y: 53.31), controlPoint1: CGPoint(x: 90.07, y: 50.88), controlPoint2: CGPoint(x: 88.11, y: 51.69))
        bezier4Path.addCurve(to: CGPoint(x: 84.06, y: 59.18), controlPoint1: CGPoint(x: 84.87, y: 54.93), controlPoint2: CGPoint(x: 84.06, y: 56.89))
        bezier4Path.addCurve(to: CGPoint(x: 86.49, y: 65.04), controlPoint1: CGPoint(x: 84.06, y: 61.47), controlPoint2: CGPoint(x: 84.87, y: 63.42))
        bezier4Path.addCurve(to: CGPoint(x: 92.36, y: 67.47), controlPoint1: CGPoint(x: 88.11, y: 66.66), controlPoint2: CGPoint(x: 90.07, y: 67.47))
        bezier4Path.addCurve(to: CGPoint(x: 98.22, y: 65.04), controlPoint1: CGPoint(x: 94.64, y: 67.47), controlPoint2: CGPoint(x: 96.6, y: 66.66))
        bezier4Path.addCurve(to: CGPoint(x: 100.65, y: 59.18), controlPoint1: CGPoint(x: 99.84, y: 63.42), controlPoint2: CGPoint(x: 100.65, y: 61.47))
        bezier4Path.addCurve(to: CGPoint(x: 98.22, y: 53.31), controlPoint1: CGPoint(x: 100.65, y: 56.89), controlPoint2: CGPoint(x: 99.84, y: 54.93))
        bezier4Path.addCurve(to: CGPoint(x: 92.36, y: 50.88), controlPoint1: CGPoint(x: 96.6, y: 51.69), controlPoint2: CGPoint(x: 94.64, y: 50.88))
        bezier4Path.close()
        indicatorColor.setFill()
        bezier4Path.fill()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawBackCover(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 280, height: 206), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 280, height: 206), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 280, y: resizedFrame.height / 206)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 280, resizedFrame.height / 206)


        //// Color Declarations
        let flatSkyBlueLight = UIColor(red: 0.224, green: 0.555, blue: 0.829, alpha: 1.000)
        let flatWhiteDark = UIColor(red: 0.678, green: 0.702, blue: 0.718, alpha: 1.000)
        let shadowColor = UIColor(red: 0.141, green: 0.141, blue: 0.141, alpha: 1.000)

        //// Shadow Declarations
        let backCoverShadow = NSShadow()
        backCoverShadow.shadowColor = shadowColor.withAlphaComponent(0.63 * shadowColor.cgColor.alpha)
        backCoverShadow.shadowOffset = CGSize(width: 0, height: 0)
        backCoverShadow.shadowBlurRadius = 2

        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(roundedRect: CGRect(x: 0, y: 0, width: 280, height: 206), cornerRadius: 8)
        flatWhiteDark.setFill()
        rectanglePath.fill()

        ////// Rectangle Inner Shadow
        context.saveGState()
        context.clip(to: rectanglePath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((backCoverShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let rectangleOpaqueShadow = (backCoverShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: backCoverShadow.shadowOffset.width * resizedShadowScale, height: backCoverShadow.shadowOffset.height * resizedShadowScale), blur: backCoverShadow.shadowBlurRadius * resizedShadowScale, color: rectangleOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        rectangleOpaqueShadow.setFill()
        rectanglePath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()



        //// Symbol Drawing
        let symbolRect = CGRect(x: 4, y: 5, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbolRect)
        context.translateBy(x: symbolRect.minX, y: symbolRect.minY)

        StyleKit.drawScrew(frame: CGRect(origin: .zero, size: symbolRect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 2 Drawing
        let symbol2Rect = CGRect(x: 244, y: 5, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbol2Rect)
        context.translateBy(x: symbol2Rect.minX, y: symbol2Rect.minY)

        StyleKit.drawScrew(frame: CGRect(origin: .zero, size: symbol2Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 3 Drawing
        let symbol3Rect = CGRect(x: 4, y: 168, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbol3Rect)
        context.translateBy(x: symbol3Rect.minX, y: symbol3Rect.minY)

        StyleKit.drawScrew(frame: CGRect(origin: .zero, size: symbol3Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Symbol 4 Drawing
        let symbol4Rect = CGRect(x: 244, y: 168, width: 32, height: 32)
        context.saveGState()
        context.clip(to: symbol4Rect)
        context.translateBy(x: symbol4Rect.minX, y: symbol4Rect.minY)

        StyleKit.drawScrew(frame: CGRect(origin: .zero, size: symbol4Rect.size), resizing: .stretch)
        context.restoreGState()


        //// Rectangle 2 Drawing
        let rectangle2Path = UIBezierPath(roundedRect: CGRect(x: 45, y: 50, width: 192, height: 106), cornerRadius: 2)
        StyleKit.flatWhiteLight.setFill()
        rectangle2Path.fill()


        //// Text Drawing
        let textRect = CGRect(x: 56, y: 54, width: 169, height: 28)
        let textTextContent = "Electronic Weather Station"
        let textStyle = NSMutableParagraphStyle()
        textStyle.alignment = .center
        let textFontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.systemFontSize)!,
            .foregroundColor: flatSkyBlueLight,
            .paragraphStyle: textStyle,
        ] as [NSAttributedStringKey: Any]

        let textTextHeight: CGFloat = textTextContent.boundingRect(with: CGSize(width: textRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: textFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: textRect)
        textTextContent.draw(in: CGRect(x: textRect.minX, y: textRect.minY + (textRect.height - textTextHeight) / 2, width: textRect.width, height: textTextHeight), withAttributes: textFontAttributes)
        context.restoreGState()


        //// Text 2 Drawing
        let text2Rect = CGRect(x: 56, y: 98, width: 169, height: 44)
        let text2TextContent = "Developed by Juan Gestal\njuan@gestal.es"
        let text2Style = NSMutableParagraphStyle()
        text2Style.alignment = .center
        let text2FontAttributes = [
            .font: UIFont(name: "Futura-Medium", size: UIFont.smallSystemFontSize)!,
            .foregroundColor: UIColor.black,
            .paragraphStyle: text2Style,
        ] as [NSAttributedStringKey: Any]

        let text2TextHeight: CGFloat = text2TextContent.boundingRect(with: CGSize(width: text2Rect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: text2FontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: text2Rect)
        text2TextContent.draw(in: CGRect(x: text2Rect.minX, y: text2Rect.minY + (text2Rect.height - text2TextHeight) / 2, width: text2Rect.width, height: text2TextHeight), withAttributes: text2FontAttributes)
        context.restoreGState()
        
        context.restoreGState()

    }

    @objc dynamic public class func drawScrew(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 44, height: 44), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 44, height: 44), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 44, y: resizedFrame.height / 44)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 44, resizedFrame.height / 44)


        //// Color Declarations
        let flatGrayLight = UIColor(red: 0.543, green: 0.600, blue: 0.605, alpha: 1.000)
        let flatGrayDark = UIColor(red: 0.469, green: 0.518, blue: 0.522, alpha: 1.000)

        //// Shadow Declarations
        let frameShadow = NSShadow()
        frameShadow.shadowColor = StyleKit.flatBlackLight
        frameShadow.shadowOffset = CGSize(width: 0, height: 2)
        frameShadow.shadowBlurRadius = 5

        //// Oval 2 Drawing
        let oval2Path = UIBezierPath(ovalIn: CGRect(x: 2, y: 2, width: 40, height: 40))
        flatGrayDark.setFill()
        oval2Path.fill()
        flatGrayLight.setStroke()
        oval2Path.lineWidth = 1
        oval2Path.stroke()


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 30.5, y: 9.5))
        bezierPath.addCurve(to: CGPoint(x: 31.88, y: 10.66), controlPoint1: CGPoint(x: 30.94, y: 9.73), controlPoint2: CGPoint(x: 31.25, y: 10.04))
        bezierPath.addLine(to: CGPoint(x: 33.21, y: 11.99))
        bezierPath.addCurve(to: CGPoint(x: 34.33, y: 13.3), controlPoint1: CGPoint(x: 33.83, y: 12.62), controlPoint2: CGPoint(x: 34.14, y: 12.93))
        bezierPath.addCurve(to: CGPoint(x: 34.37, y: 14.94), controlPoint1: CGPoint(x: 34.6, y: 13.87), controlPoint2: CGPoint(x: 34.6, y: 14.45))
        bezierPath.addCurve(to: CGPoint(x: 33.21, y: 16.32), controlPoint1: CGPoint(x: 34.14, y: 15.38), controlPoint2: CGPoint(x: 33.83, y: 15.7))
        bezierPath.addCurve(to: CGPoint(x: 27.53, y: 22), controlPoint1: CGPoint(x: 33.21, y: 16.32), controlPoint2: CGPoint(x: 30.65, y: 18.88))
        bezierPath.addCurve(to: CGPoint(x: 33.21, y: 27.68), controlPoint1: CGPoint(x: 30.65, y: 25.12), controlPoint2: CGPoint(x: 33.21, y: 27.68))
        bezierPath.addCurve(to: CGPoint(x: 34.33, y: 28.99), controlPoint1: CGPoint(x: 33.83, y: 28.3), controlPoint2: CGPoint(x: 34.14, y: 28.62))
        bezierPath.addCurve(to: CGPoint(x: 34.37, y: 30.63), controlPoint1: CGPoint(x: 34.6, y: 29.55), controlPoint2: CGPoint(x: 34.6, y: 30.13))
        bezierPath.addCurve(to: CGPoint(x: 33.21, y: 32.01), controlPoint1: CGPoint(x: 34.14, y: 31.07), controlPoint2: CGPoint(x: 33.83, y: 31.38))
        bezierPath.addLine(to: CGPoint(x: 31.88, y: 33.34))
        bezierPath.addCurve(to: CGPoint(x: 30.57, y: 34.46), controlPoint1: CGPoint(x: 31.25, y: 33.96), controlPoint2: CGPoint(x: 30.94, y: 34.27))
        bezierPath.addCurve(to: CGPoint(x: 28.93, y: 34.5), controlPoint1: CGPoint(x: 30, y: 34.73), controlPoint2: CGPoint(x: 29.43, y: 34.73))
        bezierPath.addCurve(to: CGPoint(x: 27.55, y: 33.34), controlPoint1: CGPoint(x: 28.49, y: 34.27), controlPoint2: CGPoint(x: 28.17, y: 33.96))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 27.66), controlPoint1: CGPoint(x: 27.55, y: 33.34), controlPoint2: CGPoint(x: 24.99, y: 30.78))
        bezierPath.addCurve(to: CGPoint(x: 16.32, y: 33.21), controlPoint1: CGPoint(x: 18.81, y: 30.72), controlPoint2: CGPoint(x: 16.32, y: 33.21))
        bezierPath.addCurve(to: CGPoint(x: 15.01, y: 34.33), controlPoint1: CGPoint(x: 15.7, y: 33.83), controlPoint2: CGPoint(x: 15.38, y: 34.14))
        bezierPath.addCurve(to: CGPoint(x: 13.37, y: 34.37), controlPoint1: CGPoint(x: 14.45, y: 34.6), controlPoint2: CGPoint(x: 13.87, y: 34.6))
        bezierPath.addCurve(to: CGPoint(x: 11.99, y: 33.21), controlPoint1: CGPoint(x: 12.93, y: 34.14), controlPoint2: CGPoint(x: 12.62, y: 33.83))
        bezierPath.addLine(to: CGPoint(x: 10.66, y: 31.88))
        bezierPath.addCurve(to: CGPoint(x: 9.54, y: 30.57), controlPoint1: CGPoint(x: 10.04, y: 31.25), controlPoint2: CGPoint(x: 9.73, y: 30.94))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 28.93), controlPoint1: CGPoint(x: 9.27, y: 30), controlPoint2: CGPoint(x: 9.27, y: 29.43))
        bezierPath.addCurve(to: CGPoint(x: 10.66, y: 27.55), controlPoint1: CGPoint(x: 9.73, y: 28.49), controlPoint2: CGPoint(x: 10.04, y: 28.17))
        bezierPath.addCurve(to: CGPoint(x: 16.21, y: 22), controlPoint1: CGPoint(x: 10.66, y: 27.55), controlPoint2: CGPoint(x: 13.15, y: 25.06))
        bezierPath.addCurve(to: CGPoint(x: 10.66, y: 16.45), controlPoint1: CGPoint(x: 13.15, y: 18.94), controlPoint2: CGPoint(x: 10.66, y: 16.45))
        bezierPath.addCurve(to: CGPoint(x: 9.54, y: 15.14), controlPoint1: CGPoint(x: 10.04, y: 15.83), controlPoint2: CGPoint(x: 9.73, y: 15.51))
        bezierPath.addCurve(to: CGPoint(x: 9.5, y: 13.5), controlPoint1: CGPoint(x: 9.27, y: 14.57), controlPoint2: CGPoint(x: 9.27, y: 14))
        bezierPath.addCurve(to: CGPoint(x: 10.66, y: 12.12), controlPoint1: CGPoint(x: 9.73, y: 13.06), controlPoint2: CGPoint(x: 10.04, y: 12.75))
        bezierPath.addLine(to: CGPoint(x: 11.99, y: 10.79))
        bezierPath.addCurve(to: CGPoint(x: 13.3, y: 9.67), controlPoint1: CGPoint(x: 12.62, y: 10.17), controlPoint2: CGPoint(x: 12.93, y: 9.86))
        bezierPath.addCurve(to: CGPoint(x: 14.94, y: 9.63), controlPoint1: CGPoint(x: 13.87, y: 9.4), controlPoint2: CGPoint(x: 14.45, y: 9.4))
        bezierPath.addCurve(to: CGPoint(x: 16.32, y: 10.79), controlPoint1: CGPoint(x: 15.38, y: 9.86), controlPoint2: CGPoint(x: 15.7, y: 10.17))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 16.34), controlPoint1: CGPoint(x: 16.32, y: 10.79), controlPoint2: CGPoint(x: 18.81, y: 13.28))
        bezierPath.addCurve(to: CGPoint(x: 27.55, y: 10.66), controlPoint1: CGPoint(x: 24.99, y: 13.22), controlPoint2: CGPoint(x: 27.55, y: 10.66))
        bezierPath.addCurve(to: CGPoint(x: 28.05, y: 10.16), controlPoint1: CGPoint(x: 27.75, y: 10.47), controlPoint2: CGPoint(x: 27.91, y: 10.3))
        bezierPath.addCurve(to: CGPoint(x: 28.86, y: 9.54), controlPoint1: CGPoint(x: 28.37, y: 9.86), controlPoint2: CGPoint(x: 28.6, y: 9.67))
        bezierPath.addCurve(to: CGPoint(x: 30.5, y: 9.5), controlPoint1: CGPoint(x: 29.43, y: 9.27), controlPoint2: CGPoint(x: 30, y: 9.27))
        bezierPath.close()
        flatGrayDark.setFill()
        bezierPath.fill()

        ////// Bezier Inner Shadow
        context.saveGState()
        context.clip(to: bezierPath.bounds)
        context.setShadow(offset: CGSize.zero, blur: 0)
        context.setAlpha((frameShadow.shadowColor as! UIColor).cgColor.alpha)
        context.beginTransparencyLayer(auxiliaryInfo: nil)
        let bezierOpaqueShadow = (frameShadow.shadowColor as! UIColor).withAlphaComponent(1)
        context.setShadow(offset: CGSize(width: frameShadow.shadowOffset.width * resizedShadowScale, height: frameShadow.shadowOffset.height * resizedShadowScale), blur: frameShadow.shadowBlurRadius * resizedShadowScale, color: bezierOpaqueShadow.cgColor)
        context.setBlendMode(.sourceOut)
        context.beginTransparencyLayer(auxiliaryInfo: nil)

        bezierOpaqueShadow.setFill()
        bezierPath.fill()

        context.endTransparencyLayer()
        context.endTransparencyLayer()
        context.restoreGState()

        flatGrayLight.setStroke()
        bezierPath.lineWidth = 1
        bezierPath.stroke()
        
        context.restoreGState()

    }




    @objc(StyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
